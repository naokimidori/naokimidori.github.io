<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt) what &amp; why ?</title>
      <link href="/2019/07/13/02-%E7%90%86%E8%A7%A3parseInt/"/>
      <url>/2019/07/13/02-%E7%90%86%E8%A7%A3parseInt/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转自 <a href="https://github.com/sisterAn/blog/issues/19" target="_blank" rel="noopener">https://github.com/sisterAn/blog/issues/19</a> 侵删</p></blockquote><h3 id="一道题目引发的问题"><a href="#一道题目引发的问题" class="headerlink" title="一道题目引发的问题"></a>一道题目引发的问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>].map(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="comment">// [10, NaN, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt"></a>parseInt</h3><p><code>parseInt()</code>  函数解析一个字符串参数，并返回一个指定基数的整数 (数学系统的基础)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> intValue = <span class="built_in">parseInt</span>(string[, radix]);</span><br></pre></td></tr></table></figure><p><code>string</code>  要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用 ToString 抽象操作)。字符串开头的空白符将会被忽略。</p><p><code>radix</code>  一个介于 2 和 36 之间的整数(数学系统的基础)，表示上述字符串的基数。默认为 10。<br><code>返回值</code>  返回一个整数或 NaN</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="number">100</span>); <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">100</span>, <span class="number">10</span>); <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">100</span>, <span class="number">2</span>); <span class="comment">// 4 -&gt; converts 100 in base 2 to base 10</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>在<code>radix</code>为 undefined，或者<code>radix</code>为 0 或者没有指定的情况下，JavaScript 作如下处理：</p><ul><li>如果字符串 string 以”0x”或者”0X”开头, 则基数是 16 (16 进制).</li><li>如果字符串 string 以”0”开头, 基数是 8（八进制）或者 10（十进制），那么具体是哪个基数由实现环境决定。ECMAScript 5 规定使用 10，但是并不是所有的浏览器都遵循这个规定。因此，永远都要明确给出 radix 参数的值。</li><li>如果字符串 string 以其它任何值开头，则基数是 10 (十进制)。</li></ul><p>更多详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank" rel="noopener">parseInt | MDN</a></p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p><code>map()</code>  方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = arr.map(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">currentValue[,index[, array]]</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// Return element for new_array</span></span><br><span class="line"> &#125;[, thisArg])</span><br></pre></td></tr></table></figure><p>可以看到<code>callback</code>回调函数需要三个参数, 我们通常只使用第一个参数 (其他两个参数是可选的)。<br><code>currentValue</code>  是 callback 数组中正在处理的当前元素。<br><code>index</code>可选, 是 callback 数组中正在处理的当前元素的索引。<br><code>array</code>可选, 是 callback map 方法被调用的数组。<br>另外还有<code>thisArg</code>可选, 执行 callback 函数时使用的 this 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.map(<span class="function"><span class="params">num</span> =&gt;</span> num + <span class="number">1</span>); <span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>更多详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">Array.prototype.map() | MDN</a></p><h3 id="回到真实的事例上"><a href="#回到真实的事例上" class="headerlink" title="回到真实的事例上"></a>回到真实的事例上</h3><p>回到我们真实的事例上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(<span class="built_in">parseInt</span>);</span><br></pre></td></tr></table></figure><p>对于每个迭代<code>map</code>, <code>parseInt()</code>传递两个参数: <strong>字符串和基数</strong>。<br>所以实际执行的的代码是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(item, index);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>即返回的值分别为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"1"</span>, <span class="number">0</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"2"</span>, <span class="number">1</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"3"</span>, <span class="number">2</span>); <span class="comment">// NaN, 3 不是二进制</span></span><br></pre></td></tr></table></figure><p>所以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="comment">// 1, NaN, NaN</span></span><br></pre></td></tr></table></figure><p>由此，加里·伯恩哈德例子也就很好解释了，这里不再赘述</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>].map(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="comment">// [10, NaN, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="如何在现实世界中做到这一点"><a href="#如何在现实世界中做到这一点" class="headerlink" title="如何在现实世界中做到这一点"></a>如何在现实世界中做到这一点</h3><p>如果您实际上想要循环访问字符串数组, 该怎么办？ <code>map()</code>然后把它换成数字？使用编号!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>].map(<span class="built_in">Number</span>);</span><br><span class="line"><span class="comment">// [10, 10, 10, 10, 10]</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记</title>
      <link href="/2019/06/30/01-webpack%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/06/30/01-webpack%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="webpack-介绍"><a href="#webpack-介绍" class="headerlink" title="webpack 介绍"></a>webpack 介绍</h2><p>Webpack 是前端 <strong>模块化管理</strong> 和 <strong>打包工具</strong>。它可以将许多松散的模块按照依赖和规则打包成前端资源。还可以将模块<strong>按需加载</strong>。<br>通过 <code>loader</code> 的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。</p><blockquote><p>本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</p></blockquote><p><img alt="webpack原理" data-src="https://upload-images.jianshu.io/upload_images/18509339-03ad20a2fa154e7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad"></p><h3 id="webpack-四个核心概念"><a href="#webpack-四个核心概念" class="headerlink" title="webpack 四个核心概念"></a>webpack 四个核心概念</h3><ul><li>入口(entry)</li><li>输出(output)</li><li>loader</li><li>插件(plugins)</li></ul><h3 id="关于模块化"><a href="#关于模块化" class="headerlink" title="关于模块化"></a>关于模块化</h3><ol><li>模块：拥有独立功能的部分</li><li>模块化：一种将系统分离成独立功能部分的方法</li><li>模块化解决的问题： <strong>避免变量污染</strong></li></ol><h3 id="CommonJS-规范"><a href="#CommonJS-规范" class="headerlink" title="CommonJS 规范"></a>CommonJS 规范</h3><p><strong>nodejs 采用了 CommonJS 模块化规范</strong></p><ol><li>每个文件就是一个独立的模块，其内部所有变量私有，对外不可见</li><li>每个模块内部使用 module.exports 进行私有暴露</li><li>加载模块使用 require</li></ol><h3 id="ES5-模块"><a href="#ES5-模块" class="headerlink" title="ES5 模块"></a>ES5 模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">"./a.js"</span>);</span><br><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">"jquery"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露</span></span><br><span class="line"><span class="keyword">var</span> fuc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports.fuc = fuc;</span><br></pre></td></tr></table></figure><h3 id="ES6-模块（2015）"><a href="#ES6-模块（2015）" class="headerlink" title="ES6 模块（2015）"></a>ES6 模块（2015）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">'./a.js</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//暴露</span></span><br><span class="line"><span class="string">export var fuc=( )=&gt;&#123; &#125;</span></span><br></pre></td></tr></table></figure><h2 id="webpack-安装"><a href="#webpack-安装" class="headerlink" title="webpack 安装"></a>webpack 安装</h2><h3 id="全局安装-安装命令行工具"><a href="#全局安装-安装命令行工具" class="headerlink" title="全局安装,安装命令行工具"></a>全局安装,安装命令行工具</h3><p><code>yarn global add webpack</code> 或 <code>npm install --global webpack</code></p><h3 id="项目安装"><a href="#项目安装" class="headerlink" title="项目安装"></a>项目安装</h3><p>初始化<br><code>yarn init -y</code> 或 <code>npm init -y</code></p><p>项目安装依赖<br><code>yarn add webpack@3.8.1 --save-dev</code></p><h2 id="配置文件-webpack-config-js"><a href="#配置文件-webpack-config-js" class="headerlink" title="配置文件 webpack.config.js"></a>配置文件 webpack.config.js</h2><blockquote><p>以 3.8.1 版本为例</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack配置对象</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//入口</span></span><br><span class="line">    entry: <span class="string">"./src/a.js"</span>, <span class="comment">// 单入单出</span></span><br><span class="line">    <span class="comment">// entry:['./src/a.js','./src/c.js'],   //多入口 单出口</span></span><br><span class="line">    <span class="comment">// entry: &#123;                  //多入口，多出口</span></span><br><span class="line">    <span class="comment">//     // key(打包以后的文件名): value(入口路径)</span></span><br><span class="line">    <span class="comment">//     amodule: './src/a.js',</span></span><br><span class="line">    <span class="comment">//     cmodule: './src/c.js'</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// 配置输出</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">//输出的路径(硬盘输出)</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">"dist/"</span>),</span><br><span class="line">        <span class="comment">//输出的文件名</span></span><br><span class="line">        filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">        <span class="comment">// filename: "[name].js",  /*多出口需设置filename*/</span></span><br><span class="line">        <span class="comment">// webpack-dev-server 服务器输出路径</span></span><br><span class="line">        publicPath: <span class="string">"/dist/"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//loader加载器配置</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            <span class="comment">// css-loader</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//less-loader</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"style-loader"</span> <span class="comment">// creates style nodes from JS strings</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"css-loader"</span> <span class="comment">// translates CSS into CommonJS</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"less-loader"</span> <span class="comment">// compiles Less to CSS</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//file-loader</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"file-loader"</span>,</span><br><span class="line">                        options: &#123;&#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//所有插件都写在此处！！！！</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">"作者: naoki"</span>),</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">"common"</span>) <span class="comment">//提取公共模块</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//自动打包</span></span><br><span class="line">    watch: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
