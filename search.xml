<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React Hooks学习笔记</title>
      <link href="/2019/10/19/10-React_Hooks%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/10/19/10-React_Hooks%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="✨React-Hooks"><a href="#✨React-Hooks" class="headerlink" title="✨React Hooks"></a>✨React Hooks</h2><h3 id="官网介绍"><a href="#官网介绍" class="headerlink" title="官网介绍"></a>官网介绍</h3><blockquote><p>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性</p></blockquote><h3 id="什么是Hook"><a href="#什么是Hook" class="headerlink" title="什么是Hook?"></a>什么是Hook?</h3><blockquote><p>Hook 是一些可以让你在函数组件里“钩入” React state 及生命周期等特性的函数。Hook 不能在 class 组件中使用 —— 这使得你不使用 class 也能使用 React。</p></blockquote><blockquote><p>Hook 在 class 内部是不起作用的。但可以使用它们来取代 class </p></blockquote><blockquote><p>hooks可以反复多次使用，相互独立。</p></blockquote><h3 id="Hook带来的好处"><a href="#Hook带来的好处" class="headerlink" title="Hook带来的好处"></a>Hook带来的好处</h3><ol><li>Hook 使开发者在无需修改组件结构的情况下复用状态逻辑</li><li>解决了嵌套地狱的问题</li><li>整合生命周期</li><li>不使用class从而解决了this指向问题</li></ol><h3 id="官网demo"><a href="#官网demo" class="headerlink" title="官网demo"></a>官网demo</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 声明一个新的叫做 “count” 的 state 变量</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="📌-State-Hook"><a href="#📌-State-Hook" class="headerlink" title="📌 State Hook"></a>📌 State Hook</h2><p><code>useState</code>就是一个react自带的hook函数。</p><p><code>useState</code> 会返回一对值：当前状态和一个更新它的函数，可以在事件处理函数中或其他一些地方调用这个函数。<code>useState</code> 唯一的参数就是初始 <code>state</code></p><h3 id="useState及其等价的class示例"><a href="#useState及其等价的class示例" class="headerlink" title="useState及其等价的class示例"></a>useState及其等价的class示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 声明一个叫 "count" 的 state 变量</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>等价于(class)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;You clicked &#123;<span class="keyword">this</span>.state.count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;() =&gt; this.setState(&#123; count: this.state.count + 1 &#125;)&#125;&gt;</span></span><br><span class="line"><span class="regexp">          Click me</span></span><br><span class="line"><span class="regexp">        &lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="调用-useState-方法的时候做了什么"><a href="#调用-useState-方法的时候做了什么" class="headerlink" title="调用 useState 方法的时候做了什么?"></a>调用 useState 方法的时候做了什么?</h4><ul><li>它定义一个 “state 变量”,示例中的变量为<code>count</code>。</li><li>与 class 里面的 <code>this.state</code> 提供的功能完全相同。</li><li>般来说，在函数退出后变量就就会”消失”，而 state 中的变量会被 React 保留。</li></ul><h4 id="useState-需要哪些参数？"><a href="#useState-需要哪些参数？" class="headerlink" title="useState 需要哪些参数？"></a>useState 需要哪些参数？</h4><ul><li>seState() 方法里面唯一的参数就是初始 state</li></ul><h4 id="useState-方法的返回值是什么？"><a href="#useState-方法的返回值是什么？" class="headerlink" title="useState 方法的返回值是什么？"></a>useState 方法的返回值是什么？</h4><ul><li>返回值为：当前 state 以及更新 state 的函数。</li></ul><h3 id="声明调用多个-state-变量"><a href="#声明调用多个-state-变量" class="headerlink" title="声明调用多个 state 变量"></a>声明调用多个 state 变量</h3><ol><li><code>useState</code>是可以多次调用的</li><li><code>useState</code>接收的初始值没有规定一定要是<code>string</code>/<code>number</code>/<code>boolean</code>这种简单数据类型，它完全可以接收对象或者数组作为参数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExampleWithManyStates</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 声明多个 state 变量！</span></span><br><span class="line">  <span class="keyword">const</span> [age, setAge] = useState(<span class="number">42</span>);</span><br><span class="line">  <span class="keyword">const</span> [fruit, setFruit] = useState(<span class="string">'banana'</span>);</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = useState([&#123; <span class="attr">text</span>: <span class="string">'Learn Hooks'</span> &#125;]);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="react是怎么保证多个useState的相互独立的？"><a href="#react是怎么保证多个useState的相互独立的？" class="headerlink" title="react是怎么保证多个useState的相互独立的？"></a>react是怎么保证多个useState的相互独立的？</h3><blockquote><p>react是根据useState出现的顺序来定的。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一次渲染</span></span><br><span class="line">useState(<span class="number">42</span>);  <span class="comment">//将age初始化为42</span></span><br><span class="line">useState(<span class="string">'banana'</span>);  <span class="comment">//将fruit初始化为banana</span></span><br><span class="line">useState([&#123; <span class="attr">text</span>: <span class="string">'Learn Hooks'</span> &#125;]); <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二次渲染</span></span><br><span class="line">useState(<span class="number">42</span>);  <span class="comment">//读取状态变量age的值（这时候传的参数42直接被忽略）</span></span><br><span class="line">useState(<span class="string">'banana'</span>);  <span class="comment">//读取状态变量fruit的值（这时候传的参数banana直接被忽略）</span></span><br><span class="line">useState([&#123; <span class="attr">text</span>: <span class="string">'Learn Hooks'</span> &#125;]); <span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>改下代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> showFruit = <span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExampleWithManyStates</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [age, setAge] = useState(<span class="number">42</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(showFruit) &#123;</span><br><span class="line">    <span class="keyword">const</span> [fruit, setFruit] = useState(<span class="string">'banana'</span>);</span><br><span class="line">    showFruit = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = useState([&#123; <span class="attr">text</span>: <span class="string">'Learn Hooks'</span> &#125;]);</span><br></pre></td></tr></table></figure><p>这样一来:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一次渲染</span></span><br><span class="line">useState(<span class="number">42</span>);  <span class="comment">//将age初始化为42</span></span><br><span class="line">useState(<span class="string">'banana'</span>);  <span class="comment">//将fruit初始化为banana</span></span><br><span class="line">useState([&#123; <span class="attr">text</span>: <span class="string">'Learn Hooks'</span> &#125;]); <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二次渲染</span></span><br><span class="line">useState(<span class="number">42</span>);  <span class="comment">//读取状态变量age的值（这时候传的参数42直接被忽略）</span></span><br><span class="line"><span class="comment">// useState('banana');  </span></span><br><span class="line">useState([&#123; <span class="attr">text</span>: <span class="string">'Learn Hooks'</span> &#125;]); <span class="comment">//读取到的却是状态变量fruit的值，导致报错</span></span><br></pre></td></tr></table></figure><p>鉴于此，react规定必须把hooks写在函数的最外层，不能写在ifelse等条件语句当中，来确保hooks的执行顺序一致。</p><hr><h2 id="⚡️-Effect-Hook"><a href="#⚡️-Effect-Hook" class="headerlink" title="⚡️ Effect Hook"></a>⚡️ Effect Hook</h2><p>之前写的有状态组件(class)，通常会产生很多的副作用（side effect），比如发起ajax请求获取数据，添加一些监听的注册和取消注册，手动修改dom等等。之前都把这些副作用的函数写在生命周期函数钩子里，比如<code>componentDidMount</code>，<code>componentDidUpdate</code>和<code>componentWillUnmount</code>。而现在的<code>useEffect</code>就相当与这些声明周期函数钩子的集合体。</p><p>React 将按照 effect 声明的顺序依次调用组件中的每一个 effect。</p><h3 id="useEffect及其等价的class示例"><a href="#useEffect及其等价的class示例" class="headerlink" title="useEffect及其等价的class示例"></a>useEffect及其等价的class示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 更新标题</span></span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>等价于(class)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span> times`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span> times`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;You clicked &#123;<span class="keyword">this</span>.state.count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;() =&gt; this.setState(&#123; count: this.state.count + 1 &#125;)&#125;&gt;</span></span><br><span class="line"><span class="regexp">          Click me</span></span><br><span class="line"><span class="regexp">        &lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>梳理逻辑:<br>首先，声明了一个状态变量<code>count</code>，将它的初始值设为0。然后告诉react，这个组件有一个副作用。给<code>useEffect hook</code>传了一个匿名函数，这个匿名函数就是副作用。在这个例子里，副作用是调用browser API来修改文档标题。当react要渲染组件时，它会先记住用到的副作用。等react更新了DOM之后，它再依次执行定义的副作用函数。</p><p>这里要注意几点：<br>第一，react首次渲染和之后的每次渲染都会调用一遍传给<code>useEffect</code>的函数。而之前要用两个声明周期函数来分别表示首次渲染<code>componentDidMount</code>，和之后的更新导致的重新渲染<code>componentDidUpdate</code>。</p><p>第二，useEffect中定义的副作用函数的执行不会阻碍浏览器更新视图，也就是说这些函数是<strong>异步执行</strong>的，而之前的componentDidMount或componentDidUpdate中的代码则是同步执行的。这种安排对大多数副作用说都是合理的，但有的情况除外，比如有时候需要先根据DOM计算出某个元素的尺寸再重新渲染，这时候希望这次重新渲染是同步发生的，也就是说它会在浏览器真的去绘制这个页面前发生。</p><h3 id="清除副作用"><a href="#清除副作用" class="headerlink" title="清除副作用"></a>清除副作用</h3><p>在 React 组件中有两种常见副作用操作：需要清除的和不需要清除的。先来更仔细地看一下它们之间的区别。</p><h4 id="无需清除的-effect"><a href="#无需清除的-effect" class="headerlink" title="无需清除的 effect"></a>无需清除的 effect</h4><blockquote><p>有时候，想在 React 更新 DOM之后运行一些额外的代码。比如发送网络请求，手动变更 DOM，记录日志，这些都是常见的无需清除的操作。因为在执行完这些操作之后，就可以忽略他们了。</p></blockquote><p>例如之前的示例就是无需清除的 effect</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="需要清除的-effect"><a href="#需要清除的-effect" class="headerlink" title="需要清除的 effect"></a>需要清除的 effect</h4><p>为了防止引起内存泄露，需要清除 effect。例如：订阅外部数据源 </p><p>在React class 中一般在<code>componentWillUnmount</code>这个生命钩子中清除</p><p><code>useEffect</code> 可以在组件渲染后实现各种不同的副作用。有些副作用可能需要清除，所以需要返回一个函数，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handleStatusChange</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">      setIsOnline(status.isOnline);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="怎么跳过一些不必要的副作用函数"><a href="#怎么跳过一些不必要的副作用函数" class="headerlink" title="怎么跳过一些不必要的副作用函数"></a>怎么跳过一些不必要的副作用函数</h4><p>只需要给useEffect传第二个参数即可.</p><p>用第二个参数来告诉react只有当这个参数的值发生改变时，才执行我副作用函数（第一个参数）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">&#125;, [count]); <span class="comment">// 只有当count的值发生变化时，才会重新执行`document.title`这一句</span></span><br></pre></td></tr></table></figure><h2 id="自定义Hook"><a href="#自定义Hook" class="headerlink" title="自定义Hook"></a>自定义Hook</h2><p>待续…</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://juejin.im/post/5be3ea136fb9a049f9121014" target="_blank" rel="noopener">30分钟精通React Hooks</a></li><li><a href="https://react-1251415695.cos-website.ap-chengdu.myqcloud.com/docs/hooks-intro.html" target="_blank" rel="noopener">官网文档</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> React Hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高阶函数之map filter reduce</title>
      <link href="/2019/10/10/09-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E4%B9%8Bmap-filter-reduce/"/>
      <url>/2019/10/10/09-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E4%B9%8Bmap-filter-reduce/</url>
      
        <content type="html"><![CDATA[<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><blockquote><p>高阶函数指的是一个函数以函数为参数，或以函数为返回值，或者既以函数为参数又以函数为返回值</p></blockquote><p>高阶函数经常用于：</p><ul><li>抽象或隔离行为、作用，异步控制流程作为回调函数，promises，monads等</li><li>创建可以泛用于各种数据类型的功能</li><li>部分应用于函数参数（偏函数应用）或创建一个柯里化的函数，用于复用或函数复合。</li><li>接受一个函数列表并返回一些由这个列表中的函数组成的复合函数</li></ul><h3 id="js一些内置的高阶函数"><a href="#js一些内置的高阶函数" class="headerlink" title="js一些内置的高阶函数"></a>js一些内置的高阶函数</h3><p><code>Array.prototype.map</code><br><code>Array.prototype.filter</code><br><code>Array.prototype.reduce</code></p><h4 id="一张图讲清三者区别"><a href="#一张图讲清三者区别" class="headerlink" title="一张图讲清三者区别"></a>一张图讲清三者区别</h4><p><img alt="区别" data-src="https://upload-images.jianshu.io/upload_images/18509339-c81a84969495d496.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad"></p><hr><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><blockquote><p>map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。map 不会改变原数组。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animals = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"Fluffykins"</span>, <span class="attr">species</span>: <span class="string">"rabbit"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"Caro"</span>, <span class="attr">species</span>: <span class="string">"dog"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"Hamilton"</span>, <span class="attr">species</span>: <span class="string">"dog"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"Harold"</span>, <span class="attr">species</span>: <span class="string">"fish"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"Ursula"</span>, <span class="attr">species</span>: <span class="string">"cat"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"Jimmy"</span>, <span class="attr">species</span>: <span class="string">"fish"</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用高阶函数</span></span><br><span class="line"><span class="keyword">var</span> names = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; animals.length; i++) &#123;</span><br><span class="line">  names.push(animals[i].name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(names); <span class="comment">//["Fluffykins", "Caro", "Hamilton", "Harold", "Ursula", "Jimmy"]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用高阶函数</span></span><br><span class="line"><span class="keyword">var</span> names = animals.map(<span class="function"><span class="params">x</span>=&gt;</span>x.name);</span><br><span class="line"><span class="built_in">console</span>.log(names); <span class="comment">//["Fluffykins", "Caro", "Hamilton", "Harold", "Ursula", "Jimmy"]</span></span><br></pre></td></tr></table></figure><hr><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><blockquote><p>filter() 方法会创建一个新数组，其中包含所有通过回调函数测试的元素。<br>filter 为数组中的每个元素调用一次 callback 函数， callback 函数返回 true 表示该元素通过测试，保留该元素，false 则不保留。filter 不会改变原数组，它返回过滤后的新数组。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animals = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"Fluffykins"</span>, <span class="attr">species</span>: <span class="string">"rabbit"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"Caro"</span>, <span class="attr">species</span>: <span class="string">"dog"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"Hamilton"</span>, <span class="attr">species</span>: <span class="string">"dog"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"Harold"</span>, <span class="attr">species</span>: <span class="string">"fish"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"Ursula"</span>, <span class="attr">species</span>: <span class="string">"cat"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"Jimmy"</span>, <span class="attr">species</span>: <span class="string">"fish"</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用高阶函数</span></span><br><span class="line"><span class="keyword">var</span> dogs = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; animals.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (animals[i].species === <span class="string">"dog"</span>) dogs.push(animals[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(dogs); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用高阶函数</span></span><br><span class="line"><span class="keyword">var</span> dogs = animals.filter(<span class="function"><span class="params">x</span> =&gt;</span> x.species === <span class="string">"dog"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dogs); <span class="comment">// &#123;name: "Caro", species: "dog"&#125; // &#123; name: "Hamilton", species: "dog" &#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><blockquote><p>reduce 方法对调用数组的每个元素执行回调函数，最后生成一个单一的值并返回。 reduce 方法接受两个参数：1）reduce 函数（回调），2）一个可选的 initialValue。<br>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p><code>arr.reduce(callback,initialValue)</code></p><h4 id="reduce的一些应用场景"><a href="#reduce的一些应用场景" class="headerlink" title="reduce的一些应用场景"></a>reduce的一些应用场景</h4><p>1.求和求积</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> sum = arr.reduce(<span class="function">(<span class="params">x,y</span>)=&gt;</span>x+y)</span><br><span class="line"><span class="keyword">var</span> mul = arr.reduce(<span class="function">(<span class="params">x,y</span>)=&gt;</span>x*y)</span><br><span class="line"><span class="built_in">console</span>.log( sum ); <span class="comment">//求和，10</span></span><br><span class="line"><span class="built_in">console</span>.log( mul ); <span class="comment">//求乘积，24</span></span><br></pre></td></tr></table></figure><p>2.计算数组中每个元素出现的次数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> names = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Tiff'</span>, <span class="string">'Bruce'</span>, <span class="string">'Alice'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nameNum = names.reduce(<span class="function">(<span class="params">pre,cur</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(cur <span class="keyword">in</span> pre)&#123;</span><br><span class="line">    pre[cur]++</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    pre[cur] = <span class="number">1</span> </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pre</span><br><span class="line">&#125;,&#123;&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(nameNum); <span class="comment">//&#123;Alice: 2, Bob: 1, Tiff: 1, Bruce: 1&#125;</span></span><br></pre></td></tr></table></figure><p>3.数组去重</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> newArr = arr.reduce(<span class="function">(<span class="params">pre,cur</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!pre.includes(cur))&#123;</span><br><span class="line">      <span class="keyword">return</span> pre.concat(cur)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> pre</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,[])</span><br><span class="line"><span class="built_in">console</span>.log(newArr);<span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>4.将二维数组转化为一维</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]]</span><br><span class="line"><span class="keyword">let</span> newArr = arr.reduce(<span class="function">(<span class="params">pre,cur</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre.concat(cur)</span><br><span class="line">&#125;,[])</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>5.将多维数组转化为一维</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]]]</span><br><span class="line"><span class="keyword">const</span> newArr = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">pre,cur</span>)=&gt;</span>pre.concat(<span class="built_in">Array</span>.isArray(cur)?newArr(cur):cur),[])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr(arr)); <span class="comment">//[0, 1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure><p>6.对象里的属性求和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = [</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'math'</span>,</span><br><span class="line">        score: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'chinese'</span>,</span><br><span class="line">        score: <span class="number">20</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'english'</span>,</span><br><span class="line">        score: <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = result.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cur.score + prev;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum) <span class="comment">//60</span></span><br></pre></td></tr></table></figure><p>7.将[1,3,1,4]转为数字1314</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addDigitValue</span>(<span class="params">prev,curr,curIndex,array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> exponent = (array.length <span class="number">-1</span>) -curIndex;</span><br><span class="line">    <span class="keyword">var</span> digitValue = curr*<span class="built_in">Math</span>.pow(<span class="number">10</span>,exponent);</span><br><span class="line">    <span class="keyword">return</span> prev + digitValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr6 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> result7 = arr6.reduce(addDigitValue,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'result7'</span>,result7)</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://juejin.im/post/5cb30e2ce51d456e63760450#heading-9" target="_blank" rel="noopener">https://juejin.im/post/5cb30e2ce51d456e63760450#heading-9</a><br><a href="https://www.cnblogs.com/chengxs/p/11088238.html" target="_blank" rel="noopener">https://www.cnblogs.com/chengxs/p/11088238.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter学习笔记(2)之常用组件~1</title>
      <link href="/2019/09/24/08-flutter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
      <url>/2019/09/24/08-flutter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Flutter 一切皆组件！</p></blockquote><h2 id="01-Text-Widget"><a href="#01-Text-Widget" class="headerlink" title="01-Text Widget"></a>01-Text Widget</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext content) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">"Tittle"</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Center(</span><br><span class="line">            child: Text(</span><br><span class="line">          <span class="string">'我叫 vino ,热爱前端, 梅西忠实粉丝, 今天2019/09/24，梅西获得了职业生涯第六座世界足球先生奖杯🏆，高兴！😃'</span>,</span><br><span class="line">          textAlign: TextAlign.left,</span><br><span class="line">        )),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-textAlign-属性"><a href="#1-1-textAlign-属性" class="headerlink" title="1.1 textAlign 属性"></a>1.1 textAlign 属性</h3><p>文本对齐格式</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">child: Text(</span><br><span class="line">  <span class="string">'我叫 vino ,热爱前端, 梅西忠实粉丝, 今天2019/09/24，梅西获得了职业生涯第六座世界足球先生奖杯🏆，高兴！😃'</span>,</span><br><span class="line">  textAlign: TextAlign.left</span><br><span class="line">))</span><br></pre></td></tr></table></figure><p>默认<code>left</code>,可以设置为<code>left</code> <code>center</code> <code>right</code> <code>start</code> <code>end</code><br><img alt="left和start" data-src="http://ww1.sinaimg.cn/large/8347ed67gy1g7aof9cigqj20cv0nzabn.jpg" class="lozad"><br><img alt="center" data-src="http://ww1.sinaimg.cn/large/8347ed67gy1g7aof9dg1tj20cv0nz403.jpg" class="lozad"><br><img alt="right和end" data-src="http://ww1.sinaimg.cn/large/8347ed67gy1g7aof9hmftj20cv0nz75v.jpg" class="lozad"></p><h3 id="1-2-maxLines-属性"><a href="#1-2-maxLines-属性" class="headerlink" title="1.2 maxLines 属性"></a>1.2 maxLines 属性</h3><p>最大行数，超出隐藏</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> child: Text(</span><br><span class="line">  <span class="string">'我叫 vino ,热爱前端, 梅西忠实粉丝, 今天2019/09/24，梅西获得了职业生涯第六座世界足球先生奖杯🏆，高兴！😃'</span>,</span><br><span class="line">  textAlign: TextAlign.center,</span><br><span class="line">  maxLines: <span class="number">1</span>,</span><br><span class="line">))</span><br></pre></td></tr></table></figure><p><img alt="最大行数" data-src="http://ww1.sinaimg.cn/large/8347ed67gy1g7aoisusnsj20c80nh0u4.jpg" class="lozad"></p><h3 id="1-3-overflow-属性"><a href="#1-3-overflow-属性" class="headerlink" title="1.3 overflow 属性"></a>1.3 overflow 属性</h3><p>用来处理文本溢出</p><ul><li>clip：直接切断，剩下的文字就没有了，感觉不太友好，体验性不好。</li><li>ellipsis:在后边显示省略号，体验性较好，经常使用。</li><li>fade: 溢出的部分会进行一个渐变消失的效果，当然是上线的渐变，不是左右的哦。</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">child: Text(</span><br><span class="line">  <span class="string">'我叫 vino ,热爱前端,梅西忠实粉丝,今天2019/09/24，梅西获得了职业生涯第六座世界足球先生奖杯🏆，高兴！😃'</span>,</span><br><span class="line">  textAlign: TextAlign.center,</span><br><span class="line">  maxLines: <span class="number">1</span>,</span><br><span class="line">  overflow: TextOverflow.ellipsis,</span><br><span class="line">))</span><br></pre></td></tr></table></figure><p><img alt="clip" data-src="http://ww1.sinaimg.cn/large/8347ed67gy1g7aora02aaj20b301o746.jpg" class="lozad"><br><img alt="ellipsis" data-src="http://ww1.sinaimg.cn/large/8347ed67gy1g7aor9zumgj20ba01st8m.jpg" class="lozad"><br><img alt="fade" data-src="http://ww1.sinaimg.cn/large/8347ed67gy1g7aor9zqfxj20b501q746.jpg" class="lozad"></p><h3 id="1-4-style-属性"><a href="#1-4-style-属性" class="headerlink" title="1.4 style 属性"></a>1.4 style 属性</h3><p>style 属性有很多，使用时查询 <a href="https://api.flutter.dev/flutter/painting/TextStyle-class.html" target="_blank" rel="noopener">api 手册</a> 即可<br>例如: 字体大小 25，红色，下划线</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">style: TextStyle(</span><br><span class="line">  fontSize: <span class="number">25.0</span>,</span><br><span class="line">  color: Color.fromRGBO(<span class="number">220</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">1</span>),</span><br><span class="line">  decoration: TextDecoration.underline,</span><br><span class="line">  decorationColor: Colors.blue,</span><br><span class="line">  decorationStyle: TextDecorationStyle.wavy</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img alt="style" data-src="http://ww1.sinaimg.cn/large/8347ed67gy1g7aq5jk6z3j20ba03j3z7.jpg" class="lozad"></p><h2 id="02-Container-容器组件"><a href="#02-Container-容器组件" class="headerlink" title="02-Container 容器组件"></a>02-Container 容器组件</h2><p>这个组件相当于<code>HTML</code>中的<code>div</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Container Widget'</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Center(</span><br><span class="line">          child: Container(</span><br><span class="line">            child: <span class="keyword">new</span> Text(<span class="string">'Hello Vino'</span>, style: TextStyle(fontSize: <span class="number">40.0</span>)),</span><br><span class="line">            alignment: Alignment.topCenter,</span><br><span class="line">            width: <span class="number">500.0</span>,</span><br><span class="line">            height: <span class="number">400.0</span>,</span><br><span class="line">            color: Colors.lightBlue,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="Container" data-src="http://ww1.sinaimg.cn/large/8347ed67gy1g7arfl6sgwj20bp0nyabd.jpg" class="lozad"></p><h3 id="2-1-Alignment-属性"><a href="#2-1-Alignment-属性" class="headerlink" title="2.1 Alignment 属性"></a>2.1 Alignment 属性</h3><ul><li><code>bottomCenter</code>:下部居中对齐。</li><li><code>botomLeft</code>: 下部左对齐。</li><li><code>bottomRight</code>：下部右对齐。</li><li><code>center</code>：纵横双向居中对齐。</li><li><code>centerLeft</code>：纵向居中横向居左对齐。</li><li><code>centerRight</code>：纵向居中横向居右对齐。</li><li><code>topLeft</code>：顶部左侧对齐。</li><li><code>topCenter</code>：顶部居中对齐。</li><li><code>topRight</code>： 顶部居左对齐。</li></ul><h3 id="2-2-width-height-color-属性"><a href="#2-2-width-height-color-属性" class="headerlink" title="2.2 width height color 属性"></a>2.2 width height color 属性</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">child: Container(</span><br><span class="line">    child: <span class="keyword">new</span> Text(<span class="string">'Hello Vino'</span>, style: TextStyle(fontSize: <span class="number">40.0</span>)),</span><br><span class="line">    alignment: Alignment.topCenter,</span><br><span class="line">    width: <span class="number">500.0</span>,</span><br><span class="line">    height: <span class="number">400.0</span>,</span><br><span class="line">    color: Colors.lightBlue,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="2-3-padding-属性"><a href="#2-3-padding-属性" class="headerlink" title="2.3 padding 属性"></a>2.3 padding 属性</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">child: Container(</span><br><span class="line">    child: <span class="keyword">new</span> Text(<span class="string">'Hello Vino'</span>, style: TextStyle(fontSize: <span class="number">40.0</span>)),</span><br><span class="line">    alignment: Alignment.topLeft,</span><br><span class="line">    width: <span class="number">500.0</span>,</span><br><span class="line">    height: <span class="number">400.0</span>,</span><br><span class="line">    color: Colors.lightBlue,</span><br><span class="line">    padding: <span class="keyword">const</span> EdgeInsets.fromLTRB(<span class="number">30.0</span>, <span class="number">50.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img alt="padding" data-src="http://ww1.sinaimg.cn/large/8347ed67gy1g7arpu8qfbj20bw0nngmy.jpg" class="lozad"></p><ul><li>如果四周 padding 值相同，直接可以:<code>padding:const EdgeInsets.all(10.0)</code></li><li><code>EdgeInsets.fromLTRB(value1,value2,value3,value4)</code>的 value 值分别为<strong>左、上、右、下</strong></li></ul><h3 id="2-4-margin-属性"><a href="#2-4-margin-属性" class="headerlink" title="2.4 margin 属性"></a>2.4 margin 属性</h3><p>同 padding 属性一样</p><p><code>margin: const EdgeInsets.fromLTRB(30.0, 0.0, 10.0, 20.0)</code></p><p>或者</p><p><code>margin: const EdgeInsets.all(20.0)</code></p><h3 id="2-5-decoration-属性"><a href="#2-5-decoration-属性" class="headerlink" title="2.5 decoration 属性"></a>2.5 decoration 属性</h3><p><code>decoration</code>是 <code>container</code> 的修饰器，主要的功能是设置背景和边框。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">child: Container(</span><br><span class="line">      child: <span class="keyword">new</span> Text(<span class="string">'Hello Vino'</span>, style: TextStyle(fontSize: <span class="number">40.0</span>)),</span><br><span class="line">      alignment: Alignment.topLeft,</span><br><span class="line">      width: <span class="number">500.0</span>,</span><br><span class="line">      height: <span class="number">400.0</span>,</span><br><span class="line">      <span class="comment">// color: Colors.lightBlue,</span></span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsets.fromLTRB(<span class="number">30.0</span>, <span class="number">50.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>),</span><br><span class="line">      margin: <span class="keyword">const</span> EdgeInsets.all(<span class="number">10.0</span>),</span><br><span class="line">      decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">          gradient: <span class="keyword">const</span> LinearGradient(</span><br><span class="line">            colors: [Colors.cyan, Colors.purple, Colors.red]</span><br><span class="line">          ),</span><br><span class="line">          border: Border.all(width: <span class="number">5.0</span>, color: Colors.yellow)</span><br><span class="line">        )</span><br><span class="line">      )</span><br></pre></td></tr></table></figure><p><img alt="decoration" data-src="http://ww1.sinaimg.cn/large/8347ed67gy1g7ashhzcfvj20bq0nsmyn.jpg" class="lozad"></p><ul><li>若需要给背景加入一个渐变，这时候需要使用<code>BoxDecoration</code>这个类</li><li>须把之前的<code>color</code>去掉，否则会冲突</li><li><code>border</code>如上述代码所示</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://juejin.im/post/5bfb3bdc6fb9a049f9123e90#heading-12" target="_blank" rel="noopener">Flutter 免费视频第二季-常用组件讲解</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter学习笔记(1) 开发环境搭建</title>
      <link href="/2019/09/19/07-flutter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
      <url>/2019/09/19/07-flutter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><p>官方介绍:</p><blockquote><p>Flutter 是 Google 开源的 UI 工具包，帮助开发者通过一套代码库高效构建多平台精美应用，支持移动、Web、桌面和嵌入式平台。</p></blockquote><p>不同于其他我们熟知的移动端跨平台方案，Flutter 更像游戏引擎，因为 Flutter 有自己的渲染引擎：我们在 Flutter 上写了界面后，Flutter 会在自己的 canvas 上渲染，移动端不负责绘制。</p><p>Flutter 开辟了一种全新的思路，利用 Dart 语言，同时支持 JIT 和 AOT 两种编译方式的特性，在不同场景下使用不同的编译方式，达到最高效的开发和运行体验。</p><p>在 Debug 模式下，为了保证开发体验，采用 JIT 这种动态编译的方式，将代码运行在 Dart 虚拟机上，使得我们编写的代码可以实时更新，实现 HotReload 的特性，提升开发体验。</p><p>而在 Release 模式下，又需要保证运行速度和渲染流程度，则会采用 AOT 的编译方式，将代码直接编译成各自平台的 Native 代码，以此提高使用体验。</p><p>在 UI 渲染方面， Flutter 的渲染不依赖于平台，基于自带的 Skia 渲染引擎 ，构建了一套完整的跨平台 UI 渲染框架；在和平台交互方面，Flutter 提供了 Platform Channel 的通道，可以方便的和 Native 交互。可以说是 Google 融合多种技术才有的产物，也是跨平台方案发展的必然产物。</p><p>除此之外，一个好的技术，还需要有完善的文档去让人学习，有专业的人去维护，让技术不断发展，而在这方面，Flutter 即有完善的文档，也有 Google 团队的维护。因此 Flutter 肯定会更好的发展。</p><!--## Flutter VS React Native--><!--待续~--><h2 id="搭建-Flutter-开发环境"><a href="#搭建-Flutter-开发环境" class="headerlink" title="搭建 Flutter 开发环境"></a>搭建 Flutter 开发环境</h2><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><p>要想安装和运行 Flutter，你的开发环境至少应该满足如下的需求：</p><ul><li><p>操作系统：Windows 7 SP1 或更高的版本（64 位操作系统）。</p></li><li><p>磁盘空间：除安装 IDE 和一些工具之外还应有至少 400 MB 的空间。</p></li><li><p>工具：要让 Flutter 在你的开发环境中正常使用，依赖于以下的工具：</p><ul><li>Windows PowerShell 5.0</li><li>Git for Windows 2.x</li></ul></li></ul><h3 id="配置-Flutter-中国镜像"><a href="#配置-Flutter-中国镜像" class="headerlink" title="配置 Flutter 中国镜像"></a>配置 Flutter 中国镜像</h3><h4 id="镜像源"><a href="#镜像源" class="headerlink" title="镜像源"></a>镜像源</h4><p>国内有两个镜像可以用</p><ul><li>Flutter 社区</li></ul><p>&emsp;&emsp;FLUTTER_STORAGE_BASE_URL: <code>https://storage.flutter-io.cn</code></p><p>&emsp;&emsp;PUB_HOSTED_URL: <code>https://pub.flutter-io.cn</code></p><ul><li>上海交通大学 Linux 用户组</li></ul><p>&emsp;&emsp;FLUTTER_STORAGE_BASE_URL:<code>https://mirrors.sjtug.sjtu.edu.cn</code></p><p>&emsp;&emsp;PUB_HOSTED_URL: <code>https://dart-pub.mirrors.sjtug.sjtu.edu.cn</code></p><h4 id="windows-下的配置方法"><a href="#windows-下的配置方法" class="headerlink" title="windows 下的配置方法"></a>windows 下的配置方法</h4><ol><li><code>计算机</code> -&gt; <code>属性</code> -&gt; <code>高级系统设置</code> -&gt; <code>环境变量</code>，打开环境变量设置框。</li><li>在用户变量下，选择<code>新建环境变量</code>，添加如下的两个环境变量和值</li></ol><table><thead><tr><th>变量名</th><th>值</th></tr></thead><tbody><tr><td>FLUTTER_STORAGE_BASE_URL</td><td><code>https://storage.flutter-io.cn</code></td></tr><tr><td>PUB_HOSTED_URL</td><td><code>https://pub.flutter-io.cn</code></td></tr></tbody></table><h3 id="搭建-Android-开发环境"><a href="#搭建-Android-开发环境" class="headerlink" title="搭建 Android 开发环境"></a>搭建 Android 开发环境</h3><h4 id="下载-Android-Studio"><a href="#下载-Android-Studio" class="headerlink" title="下载 Android Studio"></a>下载 Android Studio</h4><p><code>Android Studio</code> 的下载地址有三个，选一个可以下载的地址：</p><ul><li>官方地址：developer.android.com/studio</li><li>官方中文地址：developer.android.google.cn/studio/</li><li>国内第三方地址：<a href="http://www.androiddevtools.cn/" target="_blank" rel="noopener">www.androiddevtools.cn/</a></li></ul><h4 id="配置-Android-SDK-环境变量"><a href="#配置-Android-SDK-环境变量" class="headerlink" title="配置 Android SDK 环境变量"></a>配置 Android SDK 环境变量</h4><p><img alt data-src="http://ww1.sinaimg.cn/large/8347ed67gy1g6wmpjylozj20pq0fwaci.jpg" class="lozad"></p><p><img alt data-src="http://ww1.sinaimg.cn/large/8347ed67gy1g6wmpjz53tj20sk0jz0uj.jpg" class="lozad"></p><h4 id="创建模拟器"><a href="#创建模拟器" class="headerlink" title="创建模拟器"></a>创建模拟器</h4><p><img alt data-src="http://ww1.sinaimg.cn/large/8347ed67gy1g6wmpk3jvdj20ox0f9769.jpg" class="lozad"></p><p>在打开的页面里点击 <code>Create Virtual Device...</code></p><p>在 Phone 里选择一个设备，这里选择 <code>Pixel 2 XL</code></p><p><img alt data-src="http://ww1.sinaimg.cn/large/8347ed67gy1g6wmpky9n7j20s80j5wfj.jpg" class="lozad"></p><p>一直点击<code>next</code>完成~<br>在用户环境变量<code>path</code>中添加上<br><img alt data-src="http://ww1.sinaimg.cn/large/8347ed67gy1g6wn4xjm9dj20f10fujrq.jpg" class="lozad"></p><h3 id="下载-Flutter-SDK"><a href="#下载-Flutter-SDK" class="headerlink" title="下载 Flutter SDK"></a>下载 Flutter SDK</h3><h4 id="命令行方式"><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h4><ol><li>打开命令行窗口，cd 到安装 Flutter SDK 的目录</li><li>安装稳定版 <code>git clone -b stable https://github.com/flutter/flutter.git</code></li><li>打开 flutter 的文件夹，双击运行 <code>flutter_console.bat</code> 开始安装</li></ol><p><em>这种方式有时候网速慢，容易失败</em></p><h4 id="直接下载压缩包方式"><a href="#直接下载压缩包方式" class="headerlink" title="直接下载压缩包方式"></a>直接下载压缩包方式</h4><ol><li>官网下载最新稳定版本</li><li>将 Flutter SDK 的 zip 包解压到一个目录下，例如<code>C:\src\flutter</code>（目录随意，但是不要放在需要权限的目录下，例如 <code>C:\Program Files\</code> ）</li></ol><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>打开用户环境变量 <code>path</code>,新增一条<code>C:\src\flutter\bin</code></p><h3 id="运行-flutter-doctor"><a href="#运行-flutter-doctor" class="headerlink" title="运行 flutter doctor"></a>运行 flutter doctor</h3><p>上述命令会检查你的现有环境，然后把检测结果以报告形式呈现出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[√] Flutter (Channel stable, v1.9.1+hotfix.2, on Microsoft Windows [Version 10.0.18362.356], locale zh-CN)</span><br><span class="line"></span><br><span class="line">[!] Android toolchain - develop for Android devices (Android SDK version 29.0.2)</span><br><span class="line">    ! Some Android licenses not accepted.  To resolve this, run: flutter doctor --android-licenses</span><br><span class="line">[!] Android Studio (version 3.5)</span><br><span class="line">    X Flutter plugin not installed; this adds Flutter specific functionality.</span><br><span class="line">    X Dart plugin not installed; this adds Dart specific functionality.</span><br><span class="line">[!] Connected device</span><br><span class="line">    ! No devices available</span><br><span class="line"></span><br><span class="line">! Doctor found issues in 3 categories.</span><br></pre></td></tr></table></figure><p>问题 1：<code>Some Android licenses not accepted.</code></p><p>解决：命令<code>flutter doctor --android-licenses</code>,手动输入<code>y</code>即可</p><p>问题 2：<code>Flutter plugin not installed</code> 和 <code>Dart plugin not installed</code></p><p>解决：进入 Android Studio 的设置<code>settings</code>中的<code>plugins</code>搜索下载即可</p><p>问题 3：<code>No devices available</code></p><p>解决：使用 Android Studio 连接手机调试。</p><h2 id="开发使用的-IDE"><a href="#开发使用的-IDE" class="headerlink" title="开发使用的 IDE"></a>开发使用的 IDE</h2><ol><li>android studio</li><li>vscode</li></ol><p>推荐<code>vscode</code>,安装<code>flutter</code>插件<br><img alt data-src="http://ww1.sinaimg.cn/large/8347ed67gy1g6wqkes52jj210v0fcq5o.jpg" class="lozad"></p><p><strong>至此，flutter 开发环境搭建完毕~</strong></p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="comment">//主函数（入口函数）</span></span><br><span class="line"><span class="keyword">void</span> main() =&gt;runApp(MyApp());</span><br><span class="line"><span class="comment">// 声明MyApp类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  <span class="comment">//重写build方法</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context)&#123;</span><br><span class="line">    <span class="comment">//返回一个Material风格的组件</span></span><br><span class="line">   <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title:<span class="string">'Welcome to Flutteraa'</span>,</span><br><span class="line">      home:Scaffold(</span><br><span class="line">        <span class="comment">//创建一个Bar，并添加文本</span></span><br><span class="line">        appBar:AppBar(</span><br><span class="line">          title:Text(<span class="string">'Welcome to Flutter'</span>),</span><br><span class="line">        ),</span><br><span class="line">        <span class="comment">//在主体的中间区域，添加一个hello world 的文本</span></span><br><span class="line">        body:Center(</span><br><span class="line">          child:Text(<span class="string">'Hello World'</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="hello world" data-src="http://ww1.sinaimg.cn/large/8347ed67gy1g7ao90vgvjj20cv0nzmyp.jpg" class="lozad"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://juejin.im/book/5c5423ef6fb9a049cd54a213/section/5c615b6751882562e66c8f9e" target="_blank" rel="noopener">搭建 Flutter 开发环境</a></li><li><a href="https://cloud.tencent.com/developer/news/240657" target="_blank" rel="noopener">Flutter 学习笔记（1）：开发环境搭建</a></li><li><a href="https://juejin.im/post/5be3d54cf265da611d6624d3" target="_blank" rel="noopener">Flutter 免费视频教程第一季：开发环境搭建</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客之绑定自己的域名</title>
      <link href="/2019/09/11/06-hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/"/>
      <url>/2019/09/11/06-hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="绑定自己的域名"><a href="#绑定自己的域名" class="headerlink" title="绑定自己的域名"></a>绑定自己的域名</h2><p>&emsp;虽然网站已经能够访问了，但是域名却怪怪的<code>xxx.github.io</code><br>&emsp;所以必须得搞一个放荡不羁的域名！<br>&emsp;域名网上购买渠道有很多，国内较常见的是阿里云、腾讯云之类的。<br>&emsp;在<code>xxx.github.io</code>这个仓库根目录添加一个名为<code>CNAME</code>的文件</p><p><img alt="创建CNAME" data-src="https://s2.ax1x.com/2019/09/11/nwFA7q.png" class="lozad"></p><br>&emsp;文件里填写的内容：要绑定的域名（不要包含 Http://和 www）<p><img alt="CNAME内容" data-src="https://s2.ax1x.com/2019/09/11/nwFkBn.png" class="lozad"><br><br></p><p>&emsp;进入设置<br><img alt="设置" data-src="https://s2.ax1x.com/2019/09/11/nwAt6e.png" class="lozad"><br><br></p><p>&emsp;保存如下<br><img alt="设置" data-src="https://s2.ax1x.com/2019/09/11/nwArff.png" class="lozad"><br><br></p><h2 id="添加域名解析"><a href="#添加域名解析" class="headerlink" title="添加域名解析"></a>添加域名解析</h2><p>&emsp;ping 地址 得到一个 ip<br><img alt="ping域名" data-src="https://s2.ax1x.com/2019/09/11/nwVhWV.png" class="lozad"><br><br></p><p>&emsp;在阿里云的<a href="https://homenew.console.aliyun.com/" target="_blank" rel="noopener">控制台</a>的域名选项<br><img alt="域名解析" data-src="https://s2.ax1x.com/2019/09/11/nwZgXD.png" class="lozad"><br><br></p><p>&emsp;选择解析，添加两个 A 记录，用得到的 IP，一个主机记录为：”www”，一个为”@”<br><img alt="添加解析记录" data-src="https://s2.ax1x.com/2019/09/11/nweWvT.png" class="lozad"><br><br></p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>&emsp;<strong>大功告成，现在可以使用自己的域名<a href="http://naoki.top/" target="_blank" rel="noopener">naoki.top</a>访问网站了！</strong></p><br><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/liangmingshen/p/9561994.html" target="_blank" rel="noopener">github 怎么绑定自己的域名</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客添加评论系统</title>
      <link href="/2019/09/07/05-hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/09/07/05-hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<br><h2 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h2><p>&emsp;当别人浏览你的文章时(万一有人来看呢 🙃)，想和你互动一波。所以，没评论系统怎么行！<br>&emsp;现在网上有很多评论系统服务，比较常见的：</p><blockquote><ol><li>多说 ：<a href="http://duoshuo.com/" target="_blank" rel="noopener">http://duoshuo.com/</a></li><li>畅言 ：<a href="https://changyan.kuaizhan.com/" target="_blank" rel="noopener">https://changyan.kuaizhan.com/</a></li><li>Valine：<a href="https://valine.js.org/" target="_blank" rel="noopener">https://valine.js.org/</a></li><li>Disqus：<a href="https://disqus.com/" target="_blank" rel="noopener">https://disqus.com/</a></li><li>友言: <a href="http://www.uyan.cc/" target="_blank" rel="noopener">http://www.uyan.cc/</a></li><li>gitment: <a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">https://github.com/imsun/gitment</a></li></ol></blockquote><p>&emsp;我选择的是 <code>Valine</code>，不需要访客登录，可以添加邮件提醒功能。<br>&emsp;先注册<a href="https://leancloud.cn/" target="_blank" rel="noopener">leancloud</a>账户，进入控制台<br>&emsp;创建应用，然后在设置-应用 key 获取当前应用的<code>APP ID</code>和<code>APP Key</code><br>&emsp;在<code>themes</code>-<code>ButterFly</code>-<code>_config.yml</code>配置如下代码:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    appId:</span> <span class="string">xxxxx</span> <span class="comment">#你的app id</span></span><br><span class="line"><span class="attr">    appKey:</span> <span class="string">xxxxx</span> <span class="comment">#你的app key</span></span><br><span class="line"><span class="attr">    notify:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    verify:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    pageSize:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">    avatar:</span> <span class="string">wavatar</span></span><br><span class="line"><span class="attr">    lang:</span> <span class="string">zh-cn</span></span><br><span class="line"><span class="attr">    placeholder:</span> <span class="string">留下你的足迹吧!</span></span><br><span class="line"><span class="attr">    guest_info:</span> <span class="string">昵称,邮箱,website</span></span><br></pre></td></tr></table></figure><br><h2 id="管理评论数据"><a href="#管理评论数据" class="headerlink" title="管理评论数据"></a>管理评论数据</h2><p>&emsp;由于 Valine 是无后端评论系统，所以也就没有评论数据管理功能。</p><blockquote><p>当然，鲁迅曾说过：只要思想不滑坡，办法总比困难多</p></blockquote><p>&emsp;所以，这里配合<a href="https://github.com/DesertsP" target="_blank" rel="noopener">@DesertsP</a>开发的<a href="https://github.com/DesertsP/Valine-Admin" target="_blank" rel="noopener">Valine-Admin</a>能够比较轻松的管理评论！具体配置见文档~</p><p>&emsp;大概配置如下:<br><img alt="leancloud配置" data-src="https://s2.ax1x.com/2019/09/11/ndXNUH.png" class="lozad"></p><br><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><p><a href="https://jerryc.me/posts/21cfbf15/" target="_blank" rel="noopener">hexo-theme-butterfly 安裝文檔</a></p></li><li><p><a href="https://blog.csdn.net/wistbean/article/details/82291124" target="_blank" rel="noopener">使用 hexo 搭建个人博客网站最完整详细教程</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> valine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客网站搭建的过程</title>
      <link href="/2019/09/01/04-hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
      <url>/2019/09/01/04-hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前:"></a>写在最前:</h2><p>&emsp;👉 自从接触了前端这行，一直就想鼓捣一个自己的博客网站。一方面呢，可以记录一下平时所见所学以及工作中遇到的难点。二来也可以用来交(zhuang)流(B)😜。后来找工作时发现许多公司都会问你是否有个人主页之类的，想来也是一个求职的加分项。于是果断搞起!<br>&emsp;👉 其实之前也有过记录文章的习惯，最开始使用印象笔记，主要是给自己看。后来发现印象笔记的 markdown 编辑器实在是难用，果断弃之。自从有这个想法以来，也浏览过博客园以及 CSDN，博客园的网页外观像是十年前的网页，不忍直视。CSDN 的网站全部充斥着各种广告，对于我这种精神洁癖的人来说，难以接受。目前国内我觉得掘金论坛以及简书做的都还是不错。之前我也在简书上记录过几篇文章，但最近简书内容审查，几个月之内不能写文章，这又让我很难受了 😭。于是乎自己便决定搞一个网站来玩玩，毕竟我也算是业内人士了 🤔！<br>&emsp;👉 经过我长时间(实际上是上班摸鱼时间)的调查，决定使用 Hexo + github 来搭建最初的版本。之所以部署在 github 上，最大的原因肯还不是穷！国内阿里云腾讯云一年几大百，遭不住！虽然 github 服务器，访问起来有点慢，但也无所谓了。毕竟也没几个人会来访问的 🙃。至于以后要不要迁移到国内服务器上，再说吧~<br>&emsp;👉 不说废话了，开搞开搞~</p><br><h2 id="Hexo-介绍"><a href="#Hexo-介绍" class="headerlink" title="Hexo 介绍"></a>Hexo 介绍</h2><p>&emsp;<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>：Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>&emsp;<strong>使用感受</strong>: 确实快，简洁。而且还有现成的主题，直接套就完事了。具体安装文档里面都有。</p><br><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="一个-github-仓库"><a href="#一个-github-仓库" class="headerlink" title="一个 github 仓库"></a>一个 github 仓库</h3><p>&emsp;注意这个仓库最好和你 github 的 username 一致。比如你 github 的名字叫 cxk，你的这个仓库名字就叫做<code>cxk.github.io</code>，今后博客的打包生成的代码就放在这个仓库里面就行了。这个<code>cxk.github.io</code>也是博客访问的地址。</p><h3 id="nodejs-以及-Hexo-脚手架"><a href="#nodejs-以及-Hexo-脚手架" class="headerlink" title="nodejs 以及 Hexo 脚手架"></a>nodejs 以及 Hexo 脚手架</h3><p>&emsp;这个我想程序猿都会装吧。照着 Hexo 文档一步一步整就完事了~<br>&emsp;Hexo 脚手架安装: <code>npm install -g hexo-cli</code></p><h3 id="初始化生成项目"><a href="#初始化生成项目" class="headerlink" title="初始化生成项目"></a>初始化生成项目</h3><p>&emsp;安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>&emsp;新建完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml   //配置文件</span><br><span class="line">├── package.json  //包文件信息</span><br><span class="line">├── scaffolds     //模板文件，简单来说写的文章就是根据这个创建的</span><br><span class="line">├── source        //页面级文件</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes        //主题，官网一大堆，看见喜欢的copy就行了</span><br></pre></td></tr></table></figure><br><h2 id="主题-theme"><a href="#主题-theme" class="headerlink" title="主题 theme"></a>主题 theme</h2><p>&emsp;hexo 丰富的主题选择也是我使用它的主要原因。因为真的简单，会不会编程都没关系。傻瓜式的一步一步来，你的网站就出来啦！<br>&emsp;这次我选的是一个叫 <a href="https://jerryc.me/" target="_blank" rel="noopener">ButterFly</a> 的主题，由衷的感谢作者的开源精神。<br>&emsp;更多的详细配置参考主题的更多的详细配置参考主题的<a href="https://jerryc.me/posts/21cfbf15/#Page-Front-matter" target="_blank" rel="noopener">安装文档</a></p><br><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>&emsp;博客网站嘛，最重要的当然是写文章、展示文章功能！(其实我觉得狂拽酷炫才是最重要的…😂)<br>&emsp;废话少说~~</p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>&emsp;新建文章的话，可以直接在根目录的 source 文件夹下的_posts 文件夹下右键新建 md 文件<br>&emsp;<strong>但是：</strong></p><blockquote><p>作为一名 21 世纪的程序猿，推荐使用命令行方式，这样显得更 Geek 一点 😎，<br>打开命令行,例如：<code>hexo new &quot;xxxx&quot;</code></p></blockquote><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><blockquote><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量</p></blockquote><p>通俗讲，就是文章页面的一些配置信息:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题</span><br><span class="line">date:  日期</span><br><span class="line">tags:  标签</span><br><span class="line">categories: 分类(归档)</span><br><span class="line">keywords:   关键词</span><br><span class="line">description: 描述</span><br><span class="line">top_img:  文章顶部图片，没有的话展示封面图</span><br><span class="line">comments  是否显示评论（除非设置false,可以不写）</span><br><span class="line">cover:  封面图，没有的话展示默认图</span><br><span class="line">toc:  是否显示toc </span><br><span class="line">toc_number: 是否显示toc数字</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">下面是文章的正式部分...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="预览与生成"><a href="#预览与生成" class="headerlink" title="预览与生成"></a>预览与生成</h3><blockquote><p><code>hexo s</code> 本地预览，会打开一个<code>http://localhost:4000/</code>的地址，能够实时刷新预览<br><code>hexo clean</code> 删除原来的 dist 目录<br><code>hexo g</code> 打包生成</p></blockquote><h3 id="快速部署"><a href="#快速部署" class="headerlink" title="快速部署"></a>快速部署</h3><h4 id="安装-hexo-deployer-git"><a href="#安装-hexo-deployer-git" class="headerlink" title="安装 hexo-deployer-git"></a>安装 <code>hexo-deployer-git</code></h4><p>&emsp;<code>npm install hexo-deployer-git --save</code></p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>&emsp;然后在根目录下的<code>_config.yml</code>文件配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: https://github.com/xxx/xxxx.github.io.git   //git仓库地址</span><br></pre></td></tr></table></figure><h4 id="推送到-github-上"><a href="#推送到-github-上" class="headerlink" title="推送到 github 上"></a>推送到 github 上</h4><p>&emsp;命令行：<code>hexo d</code>即可</p><h3 id="访问网站"><a href="#访问网站" class="headerlink" title="访问网站"></a>访问网站</h3><p>&emsp;推送到 github 仓库之后，打开浏览器输入<code>xxx.github.io</code>就可以访问了</p><br><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><p><a href="https://jerryc.me/posts/21cfbf15/" target="_blank" rel="noopener">hexo-theme-butterfly 安裝文檔</a></p></li><li><p><a href="https://blog.csdn.net/wistbean/article/details/82291124" target="_blank" rel="noopener">使用 hexo 搭建个人博客网站最完整详细教程</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的防抖和节流</title>
      <link href="/2019/08/12/03-%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
      <url>/2019/08/12/03-%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前端开发中，经常会遇到频繁触发某一事件的情况，如 scroll、mousemove、onchange 等。这种高频率的触发会造成卡顿等现象。<br>解决这种问题通常有两种方法：<strong>防抖</strong> 和 <strong>节流</strong></p><p><img alt="没有防抖和节流" data-src="https://s2.ax1x.com/2019/09/04/nZsn0I.gif" class="lozad"></p><h2 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖 debounce"></a>防抖 debounce</h2><h3 id="防抖原理"><a href="#防抖原理" class="headerlink" title="防抖原理"></a>防抖原理</h3><blockquote><p>在事件被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时。</p></blockquote><p><img alt="防抖" data-src="https://s2.ax1x.com/2019/09/04/nZJyX8.png" class="lozad"></p><p>示例代码如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"inp"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="简易版本"><a href="#简易版本" class="headerlink" title="简易版本:"></a>简易版本:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer;   <span class="comment">//计时器id</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timer)  <span class="comment">//清除计时器</span></span><br><span class="line">        timer = setTimeout(func, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">inp.oninput = debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"test"</span>),<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>好了，一个基础的防抖函数就完成了。<br>但这样写有两个问题没有解决：<strong>this 指向</strong> 和 <strong>event 对象</strong></p><h3 id="this-指向问题？"><a href="#this-指向问题？" class="headerlink" title="this 指向问题？"></a>this 指向问题？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果输出this， 指向window</span></span><br><span class="line">inp.oninput = debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>),<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="event-对象问题？"><a href="#event-对象问题？" class="headerlink" title="event 对象问题？"></a>event 对象问题？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer; <span class="comment">//计时器id</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timer); <span class="comment">//清除计时器</span></span><br><span class="line">        timer = setTimeout(func, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bing</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">inp.oninput = debounce(bing, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">//输出 undefined</span></span><br></pre></td></tr></table></figure><h3 id="完善后的代码"><a href="#完善后的代码" class="headerlink" title="完善后的代码"></a>完善后的代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer; <span class="comment">//计时器id</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> _this = <span class="keyword">this</span>; <span class="comment">//保留this</span></span><br><span class="line">        <span class="keyword">let</span> _arg = <span class="built_in">arguments</span>; <span class="comment">//保留event</span></span><br><span class="line"></span><br><span class="line">        clearTimeout(timer); <span class="comment">//清除计时器</span></span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            func.apply(_this, _arg); <span class="comment">//改变指向</span></span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bing</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e, <span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">inp.oninput = debounce(bing, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="实现效果如下图"><a href="#实现效果如下图" class="headerlink" title="实现效果如下图:"></a>实现效果如下图:</h3><p><img alt="防抖" data-src="https://s2.ax1x.com/2019/09/04/nZsxC8.gif" class="lozad"></p><h2 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流 throttle"></a>节流 throttle</h2><h3 id="节流原理"><a href="#节流原理" class="headerlink" title="节流原理"></a>节流原理</h3><blockquote><p>特定的时间内周期，事件只会执行一次，不管被触发了多少次。如一些抽奖系统等。</p></blockquote><p><img alt="节流" data-src="https://s2.ax1x.com/2019/09/04/nZDyPU.png" class="lozad"></p><p>节流的实现目前有两种主流方式：<strong>时间戳</strong> 和 <strong>定时器</strong></p><h3 id="节流实现"><a href="#节流实现" class="headerlink" title="节流实现"></a>节流实现</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"show"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"ibox"</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//节流</span></span><br><span class="line"><span class="keyword">let</span> show = <span class="built_in">document</span>.querySelector(<span class="string">"#show"</span>),</span><br><span class="line">    ibox = <span class="built_in">document</span>.querySelector(<span class="string">"#ibox"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//shell函数</span></span><br><span class="line">    <span class="keyword">let</span> lastTime = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="keyword">if</span> (nowTime - lastTime &gt; wait) &#123;</span><br><span class="line">            fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">            lastTime = nowTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buy</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    show.innerText = <span class="built_in">parseInt</span>(show.innerText) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ibox.onclick = throttle(buy, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><img alt="节流" data-src="https://s2.ax1x.com/2019/09/04/nZyPDs.gif" class="lozad"></p><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ol><li><a href="https://juejin.im/post/5b8de829f265da43623c4261" target="_blank" rel="noopener">7 分钟理解 JS 的节流、防抖及使用场景</a></li><li><a href="https://juejin.im/post/5931561fa22b9d0058c5b87d" target="_blank" rel="noopener">JavaScript 专题之跟着 underscore 学防抖</a></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt) what &amp; why ?</title>
      <link href="/2019/07/13/02-%E7%90%86%E8%A7%A3parseInt/"/>
      <url>/2019/07/13/02-%E7%90%86%E8%A7%A3parseInt/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转自 <a href="https://github.com/sisterAn/blog/issues/19" target="_blank" rel="noopener">https://github.com/sisterAn/blog/issues/19</a> 侵删</p></blockquote><h3 id="一道题目引发的问题"><a href="#一道题目引发的问题" class="headerlink" title="一道题目引发的问题"></a>一道题目引发的问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>].map(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="comment">// [10, NaN, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt"></a>parseInt</h3><p><code>parseInt()</code>  函数解析一个字符串参数，并返回一个指定基数的整数 (数学系统的基础)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> intValue = <span class="built_in">parseInt</span>(string[, radix]);</span><br></pre></td></tr></table></figure><p><code>string</code>  要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用 ToString 抽象操作)。字符串开头的空白符将会被忽略。</p><p><code>radix</code>  一个介于 2 和 36 之间的整数(数学系统的基础)，表示上述字符串的基数。默认为 10。<br><code>返回值</code>  返回一个整数或 NaN</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="number">100</span>); <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">100</span>, <span class="number">10</span>); <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">100</span>, <span class="number">2</span>); <span class="comment">// 4 -&gt; converts 100 in base 2 to base 10</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>在<code>radix</code>为 undefined，或者<code>radix</code>为 0 或者没有指定的情况下，JavaScript 作如下处理：</p><ul><li>如果字符串 string 以”0x”或者”0X”开头, 则基数是 16 (16 进制).</li><li>如果字符串 string 以”0”开头, 基数是 8（八进制）或者 10（十进制），那么具体是哪个基数由实现环境决定。ECMAScript 5 规定使用 10，但是并不是所有的浏览器都遵循这个规定。因此，永远都要明确给出 radix 参数的值。</li><li>如果字符串 string 以其它任何值开头，则基数是 10 (十进制)。</li></ul><p>更多详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank" rel="noopener">parseInt | MDN</a></p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p><code>map()</code>  方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = arr.map(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">currentValue[,index[, array]]</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// Return element for new_array</span></span><br><span class="line"> &#125;[, thisArg])</span><br></pre></td></tr></table></figure><p>可以看到<code>callback</code>回调函数需要三个参数, 我们通常只使用第一个参数 (其他两个参数是可选的)。<br><code>currentValue</code>  是 callback 数组中正在处理的当前元素。<br><code>index</code>可选, 是 callback 数组中正在处理的当前元素的索引。<br><code>array</code>可选, 是 callback map 方法被调用的数组。<br>另外还有<code>thisArg</code>可选, 执行 callback 函数时使用的 this 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.map(<span class="function"><span class="params">num</span> =&gt;</span> num + <span class="number">1</span>); <span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>更多详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">Array.prototype.map() | MDN</a></p><h3 id="回到真实的事例上"><a href="#回到真实的事例上" class="headerlink" title="回到真实的事例上"></a>回到真实的事例上</h3><p>回到我们真实的事例上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(<span class="built_in">parseInt</span>);</span><br></pre></td></tr></table></figure><p>对于每个迭代<code>map</code>, <code>parseInt()</code>传递两个参数: <strong>字符串和基数</strong>。<br>所以实际执行的的代码是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(item, index);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>即返回的值分别为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"1"</span>, <span class="number">0</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"2"</span>, <span class="number">1</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"3"</span>, <span class="number">2</span>); <span class="comment">// NaN, 3 不是二进制</span></span><br></pre></td></tr></table></figure><p>所以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="comment">// 1, NaN, NaN</span></span><br></pre></td></tr></table></figure><p>由此，加里·伯恩哈德例子也就很好解释了，这里不再赘述</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>].map(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="comment">// [10, NaN, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="如何在现实世界中做到这一点"><a href="#如何在现实世界中做到这一点" class="headerlink" title="如何在现实世界中做到这一点"></a>如何在现实世界中做到这一点</h3><p>如果您实际上想要循环访问字符串数组, 该怎么办？ <code>map()</code>然后把它换成数字？使用编号!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>].map(<span class="built_in">Number</span>);</span><br><span class="line"><span class="comment">// [10, 10, 10, 10, 10]</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记</title>
      <link href="/2019/06/30/01-webpack%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/06/30/01-webpack%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="webpack-介绍"><a href="#webpack-介绍" class="headerlink" title="webpack 介绍"></a>webpack 介绍</h2><p>Webpack 是前端 <strong>模块化管理</strong> 和 <strong>打包工具</strong>。它可以将许多松散的模块按照依赖和规则打包成前端资源。还可以将模块<strong>按需加载</strong>。<br>通过 <code>loader</code> 的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。</p><blockquote><p>本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</p></blockquote><p><img alt="webpack原理" data-src="https://s2.ax1x.com/2019/09/02/nPRU2j.png" class="lozad"></p><h3 id="webpack-四个核心概念"><a href="#webpack-四个核心概念" class="headerlink" title="webpack 四个核心概念"></a>webpack 四个核心概念</h3><ul><li>入口(entry)</li><li>输出(output)</li><li>loader</li><li>插件(plugins)</li></ul><h3 id="关于模块化"><a href="#关于模块化" class="headerlink" title="关于模块化"></a>关于模块化</h3><ol><li>模块：拥有独立功能的部分</li><li>模块化：一种将系统分离成独立功能部分的方法</li><li>模块化解决的问题： <strong>避免变量污染</strong></li></ol><h3 id="CommonJS-规范"><a href="#CommonJS-规范" class="headerlink" title="CommonJS 规范"></a>CommonJS 规范</h3><p><strong>nodejs 采用了 CommonJS 模块化规范</strong></p><ol><li>每个文件就是一个独立的模块，其内部所有变量私有，对外不可见</li><li>每个模块内部使用 module.exports 进行私有暴露</li><li>加载模块使用 require</li></ol><h3 id="ES5-模块"><a href="#ES5-模块" class="headerlink" title="ES5 模块"></a>ES5 模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">"./a.js"</span>);</span><br><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">"jquery"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露</span></span><br><span class="line"><span class="keyword">var</span> fuc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports.fuc = fuc;</span><br></pre></td></tr></table></figure><h3 id="ES6-模块（2015）"><a href="#ES6-模块（2015）" class="headerlink" title="ES6 模块（2015）"></a>ES6 模块（2015）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">'./a.js</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//暴露</span></span><br><span class="line"><span class="string">export var fuc=( )=&gt;&#123; &#125;</span></span><br></pre></td></tr></table></figure><h2 id="webpack-安装"><a href="#webpack-安装" class="headerlink" title="webpack 安装"></a>webpack 安装</h2><h3 id="全局安装-安装命令行工具"><a href="#全局安装-安装命令行工具" class="headerlink" title="全局安装,安装命令行工具"></a>全局安装,安装命令行工具</h3><p><code>yarn global add webpack</code> 或 <code>npm install --global webpack</code></p><h3 id="项目安装"><a href="#项目安装" class="headerlink" title="项目安装"></a>项目安装</h3><p>初始化<br><code>yarn init -y</code> 或 <code>npm init -y</code></p><p>项目安装依赖<br><code>yarn add webpack@3.8.1 --save-dev</code></p><h2 id="配置文件-webpack-config-js"><a href="#配置文件-webpack-config-js" class="headerlink" title="配置文件 webpack.config.js"></a>配置文件 webpack.config.js</h2><blockquote><p>以 3.8.1 版本为例</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack配置对象</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//入口</span></span><br><span class="line">    entry: <span class="string">"./src/a.js"</span>, <span class="comment">// 单入单出</span></span><br><span class="line">    <span class="comment">// entry:['./src/a.js','./src/c.js'],   //多入口 单出口</span></span><br><span class="line">    <span class="comment">// entry: &#123;                  //多入口，多出口</span></span><br><span class="line">    <span class="comment">//     // key(打包以后的文件名): value(入口路径)</span></span><br><span class="line">    <span class="comment">//     amodule: './src/a.js',</span></span><br><span class="line">    <span class="comment">//     cmodule: './src/c.js'</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// 配置输出</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">//输出的路径(硬盘输出)</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">"dist/"</span>),</span><br><span class="line">        <span class="comment">//输出的文件名</span></span><br><span class="line">        filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">        <span class="comment">// filename: "[name].js",  /*多出口需设置filename*/</span></span><br><span class="line">        <span class="comment">// webpack-dev-server 服务器输出路径</span></span><br><span class="line">        publicPath: <span class="string">"/dist/"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//loader加载器配置</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            <span class="comment">// css-loader</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//less-loader</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"style-loader"</span> <span class="comment">// creates style nodes from JS strings</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"css-loader"</span> <span class="comment">// translates CSS into CommonJS</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"less-loader"</span> <span class="comment">// compiles Less to CSS</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//file-loader</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"file-loader"</span>,</span><br><span class="line">                        options: &#123;&#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//所有插件都写在此处！！！！</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">"作者: naoki"</span>),</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">"common"</span>) <span class="comment">//提取公共模块</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//自动打包</span></span><br><span class="line">    watch: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
