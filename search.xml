<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo博客之绑定自己的域名</title>
      <link href="/2019/09/11/06-hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/"/>
      <url>/2019/09/11/06-hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="绑定自己的域名"><a href="#绑定自己的域名" class="headerlink" title="绑定自己的域名"></a>绑定自己的域名</h2><p>&emsp;虽然网站已经能够访问了，但是域名却怪怪的<code>xxx.github.io</code><br>&emsp;所以必须得搞一个放荡不羁的域名！<br>&emsp;域名网上购买渠道有很多，国内较常见的是阿里云、腾讯云之类的。<br>&emsp;在<code>xxx.github.io</code>这个仓库根目录添加一个名为<code>CNAME</code>的文件</p><p><img alt="创建CNAME" data-src="https://s2.ax1x.com/2019/09/11/nwFA7q.png" class="lozad"></p><br>&emsp;文件里填写的内容：要绑定的域名（不要包含 Http://和 www）<p><img alt="CNAME内容" data-src="https://s2.ax1x.com/2019/09/11/nwFkBn.png" class="lozad"><br><br></p><p>&emsp;进入设置<br><img alt="设置" data-src="https://s2.ax1x.com/2019/09/11/nwAt6e.png" class="lozad"><br><br></p><p>&emsp;保存如下<br><img alt="设置" data-src="https://s2.ax1x.com/2019/09/11/nwArff.png" class="lozad"><br><br></p><h2 id="添加域名解析"><a href="#添加域名解析" class="headerlink" title="添加域名解析"></a>添加域名解析</h2><p>&emsp;ping 地址 得到一个 ip<br><img alt="ping域名" data-src="https://s2.ax1x.com/2019/09/11/nwVhWV.png" class="lozad"><br><br></p><p>&emsp;在阿里云的<a href="https://homenew.console.aliyun.com/" target="_blank" rel="noopener">控制台</a>的域名选项<br><img alt="域名解析" data-src="https://s2.ax1x.com/2019/09/11/nwZgXD.png" class="lozad"><br><br></p><p>&emsp;选择解析，添加两个 A 记录，用得到的 IP，一个主机记录为：”www”，一个为”@”<br><img alt="添加解析记录" data-src="https://s2.ax1x.com/2019/09/11/nweWvT.png" class="lozad"><br><br></p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>&emsp;<strong>大功告成，现在可以使用自己的域名<a href="http://naoki.top/" target="_blank" rel="noopener">naoki.top</a>访问网站了！</strong></p><br><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/liangmingshen/p/9561994.html" target="_blank" rel="noopener">github 怎么绑定自己的域名</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客添加评论系统</title>
      <link href="/2019/09/07/05-hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/09/07/05-hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<br><h2 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h2><p>&emsp;当别人浏览你的文章时(万一有人来看呢 🙃)，想和你互动一波。所以，没评论系统怎么行！<br>&emsp;现在网上有很多评论系统服务，比较常见的：</p><blockquote><ol><li>多说 ：<a href="http://duoshuo.com/" target="_blank" rel="noopener">http://duoshuo.com/</a></li><li>畅言 ：<a href="https://changyan.kuaizhan.com/" target="_blank" rel="noopener">https://changyan.kuaizhan.com/</a></li><li>Valine：<a href="https://valine.js.org/" target="_blank" rel="noopener">https://valine.js.org/</a></li><li>Disqus：<a href="https://disqus.com/" target="_blank" rel="noopener">https://disqus.com/</a></li><li>友言: <a href="http://www.uyan.cc/" target="_blank" rel="noopener">http://www.uyan.cc/</a></li><li>gitment: <a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">https://github.com/imsun/gitment</a></li></ol></blockquote><p>&emsp;我选择的是 <code>Valine</code>，不需要访客登录，可以添加邮件提醒功能。<br>&emsp;先注册<a href="https://leancloud.cn/" target="_blank" rel="noopener">leancloud</a>账户，进入控制台<br>&emsp;创建应用，然后在设置-应用 key 获取当前应用的<code>APP ID</code>和<code>APP Key</code><br>&emsp;在<code>themes</code>-<code>ButterFly</code>-<code>_config.yml</code>配置如下代码:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    appId:</span> <span class="string">xxxxx</span> <span class="comment">#你的app id</span></span><br><span class="line"><span class="attr">    appKey:</span> <span class="string">xxxxx</span> <span class="comment">#你的app key</span></span><br><span class="line"><span class="attr">    notify:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    verify:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    pageSize:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">    avatar:</span> <span class="string">wavatar</span></span><br><span class="line"><span class="attr">    lang:</span> <span class="string">zh-cn</span></span><br><span class="line"><span class="attr">    placeholder:</span> <span class="string">留下你的足迹吧!</span></span><br><span class="line"><span class="attr">    guest_info:</span> <span class="string">昵称,邮箱,website</span></span><br></pre></td></tr></table></figure><br><h2 id="管理评论数据"><a href="#管理评论数据" class="headerlink" title="管理评论数据"></a>管理评论数据</h2><p>&emsp;由于 Valine 是无后端评论系统，所以也就没有评论数据管理功能。</p><blockquote><p>当然，鲁迅曾说过：只要思想不滑坡，办法总比困难多</p></blockquote><p>&emsp;所以，这里配合<a href="https://github.com/DesertsP" target="_blank" rel="noopener">@DesertsP</a>开发的<a href="https://github.com/DesertsP/Valine-Admin" target="_blank" rel="noopener">Valine-Admin</a>能够比较轻松的管理评论！具体配置见文档~</p><p>&emsp;大概配置如下:<br><img alt="leancloud配置" data-src="https://s2.ax1x.com/2019/09/11/ndXNUH.png" class="lozad"></p><br><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><p><a href="https://jerryc.me/posts/21cfbf15/" target="_blank" rel="noopener">hexo-theme-butterfly 安裝文檔</a></p></li><li><p><a href="https://blog.csdn.net/wistbean/article/details/82291124" target="_blank" rel="noopener">使用 hexo 搭建个人博客网站最完整详细教程</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> valine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客网站搭建的过程</title>
      <link href="/2019/09/01/04-hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
      <url>/2019/09/01/04-hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前:"></a>写在最前:</h2><p>&emsp;👉 自从接触了前端这行，一直就想鼓捣一个自己的博客网站。一方面呢，可以记录一下平时所见所学以及工作中遇到的难点。二来也可以用来交(zhuang)流(B)😜。后来找工作时发现许多公司都会问你是否有个人主页之类的，想来也是一个求职的加分项。于是果断搞起!<br>&emsp;👉 其实之前也有过记录文章的习惯，最开始使用印象笔记，主要是给自己看。后来发现印象笔记的 markdown 编辑器实在是难用，果断弃之。自从有这个想法以来，也浏览过博客园以及 CSDN，博客园的网页外观像是十年前的网页，不忍直视。CSDN 的网站全部充斥着各种广告，对于我这种精神洁癖的人来说，难以接受。目前国内我觉得掘金论坛以及简书做的都还是不错。之前我也在简书上记录过几篇文章，但最近简书内容审查，几个月之内不能写文章，这又让我很难受了 😭。于是乎自己便决定搞一个网站来玩玩，毕竟我也算是业内人士了 🤔！<br>&emsp;👉 经过我长时间(实际上是上班摸鱼时间)的调查，决定使用 Hexo + github 来搭建最初的版本。之所以部署在 github 上，最大的原因肯还不是穷！国内阿里云腾讯云一年几大百，遭不住！虽然 github 服务器，访问起来有点慢，但也无所谓了。毕竟也没几个人会来访问的 🙃。至于以后要不要迁移到国内服务器上，再说吧~<br>&emsp;👉 不说废话了，开搞开搞~</p><br><h2 id="Hexo-介绍"><a href="#Hexo-介绍" class="headerlink" title="Hexo 介绍"></a>Hexo 介绍</h2><p>&emsp;<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>：Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>&emsp;<strong>使用感受</strong>: 确实快，简洁。而且还有现成的主题，直接套就完事了。具体安装文档里面都有。</p><br><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="一个-github-仓库"><a href="#一个-github-仓库" class="headerlink" title="一个 github 仓库"></a>一个 github 仓库</h3><p>&emsp;注意这个仓库最好和你 github 的 username 一致。比如你 github 的名字叫 cxk，你的这个仓库名字就叫做<code>cxk.github.io</code>，今后博客的打包生成的代码就放在这个仓库里面就行了。这个<code>cxk.github.io</code>也是博客访问的地址。</p><h3 id="nodejs-以及-Hexo-脚手架"><a href="#nodejs-以及-Hexo-脚手架" class="headerlink" title="nodejs 以及 Hexo 脚手架"></a>nodejs 以及 Hexo 脚手架</h3><p>&emsp;这个我想程序猿都会装吧。照着 Hexo 文档一步一步整就完事了~<br>&emsp;Hexo 脚手架安装: <code>npm install -g hexo-cli</code></p><h3 id="初始化生成项目"><a href="#初始化生成项目" class="headerlink" title="初始化生成项目"></a>初始化生成项目</h3><p>&emsp;安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>&emsp;新建完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml   //配置文件</span><br><span class="line">├── package.json  //包文件信息</span><br><span class="line">├── scaffolds     //模板文件，简单来说写的文章就是根据这个创建的</span><br><span class="line">├── source        //页面级文件</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes        //主题，官网一大堆，看见喜欢的copy就行了</span><br></pre></td></tr></table></figure><br><h2 id="主题-theme"><a href="#主题-theme" class="headerlink" title="主题 theme"></a>主题 theme</h2><p>&emsp;hexo 丰富的主题选择也是我使用它的主要原因。因为真的简单，会不会编程都没关系。傻瓜式的一步一步来，你的网站就出来啦！<br>&emsp;这次我选的是一个叫 <a href="https://jerryc.me/" target="_blank" rel="noopener">ButterFly</a> 的主题，由衷的感谢作者的开源精神。<br>&emsp;更多的详细配置参考主题的更多的详细配置参考主题的<a href="https://jerryc.me/posts/21cfbf15/#Page-Front-matter" target="_blank" rel="noopener">安装文档</a></p><br><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>&emsp;博客网站嘛，最重要的当然是写文章、展示文章功能！(其实我觉得狂拽酷炫才是最重要的…😂)<br>&emsp;废话少说~~</p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>&emsp;新建文章的话，可以直接在根目录的 source 文件夹下的_posts 文件夹下右键新建 md 文件<br>&emsp;<strong>但是：</strong></p><blockquote><p>作为一名 21 世纪的程序猿，推荐使用命令行方式，这样显得更 Geek 一点 😎，<br>打开命令行,例如：<code>hexo new &quot;xxxx&quot;</code></p></blockquote><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><blockquote><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量</p></blockquote><p>通俗讲，就是文章页面的一些配置信息:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题</span><br><span class="line">date:  日期</span><br><span class="line">tags:  标签</span><br><span class="line">categories: 分类(归档)</span><br><span class="line">keywords:   关键词</span><br><span class="line">description: 描述</span><br><span class="line">top_img:  文章顶部图片，没有的话展示封面图</span><br><span class="line">comments  是否显示评论（除非设置false,可以不写）</span><br><span class="line">cover:  封面图，没有的话展示默认图</span><br><span class="line">toc:  是否显示toc </span><br><span class="line">toc_number: 是否显示toc数字</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">下面是文章的正式部分...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="预览与生成"><a href="#预览与生成" class="headerlink" title="预览与生成"></a>预览与生成</h3><blockquote><p><code>hexo s</code> 本地预览，会打开一个<code>http://localhost:4000/</code>的地址，能够实时刷新预览<br><code>hexo clean</code> 删除原来的 dist 目录<br><code>hexo g</code> 打包生成</p></blockquote><h3 id="快速部署"><a href="#快速部署" class="headerlink" title="快速部署"></a>快速部署</h3><h4 id="安装-hexo-deployer-git"><a href="#安装-hexo-deployer-git" class="headerlink" title="安装 hexo-deployer-git"></a>安装 <code>hexo-deployer-git</code></h4><p>&emsp;<code>npm install hexo-deployer-git --save</code></p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>&emsp;然后在根目录下的<code>_config.yml</code>文件配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: https://github.com/xxx/xxxx.github.io.git   //git仓库地址</span><br></pre></td></tr></table></figure><h4 id="推送到-github-上"><a href="#推送到-github-上" class="headerlink" title="推送到 github 上"></a>推送到 github 上</h4><p>&emsp;命令行：<code>hexo d</code>即可</p><h3 id="访问网站"><a href="#访问网站" class="headerlink" title="访问网站"></a>访问网站</h3><p>&emsp;推送到 github 仓库之后，打开浏览器输入<code>xxx.github.io</code>就可以访问了</p><br><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><p><a href="https://jerryc.me/posts/21cfbf15/" target="_blank" rel="noopener">hexo-theme-butterfly 安裝文檔</a></p></li><li><p><a href="https://blog.csdn.net/wistbean/article/details/82291124" target="_blank" rel="noopener">使用 hexo 搭建个人博客网站最完整详细教程</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的防抖和节流</title>
      <link href="/2019/08/12/03-%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
      <url>/2019/08/12/03-%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前端开发中，经常会遇到频繁触发某一事件的情况，如 scroll、mousemove、onchange 等。这种高频率的触发会造成卡顿等现象。<br>解决这种问题通常有两种方法：<strong>防抖</strong> 和 <strong>节流</strong></p><p><img alt="没有防抖和节流" data-src="https://s2.ax1x.com/2019/09/04/nZsn0I.gif" class="lozad"></p><h2 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖 debounce"></a>防抖 debounce</h2><h3 id="防抖原理"><a href="#防抖原理" class="headerlink" title="防抖原理"></a>防抖原理</h3><blockquote><p>在事件被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时。</p></blockquote><p><img alt="防抖" data-src="https://s2.ax1x.com/2019/09/04/nZJyX8.png" class="lozad"></p><p>示例代码如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"inp"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="简易版本"><a href="#简易版本" class="headerlink" title="简易版本:"></a>简易版本:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer;   <span class="comment">//计时器id</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timer)  <span class="comment">//清除计时器</span></span><br><span class="line">        timer = setTimeout(func, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">inp.oninput = debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"test"</span>),<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>好了，一个基础的防抖函数就完成了。<br>但这样写有两个问题没有解决：<strong>this 指向</strong> 和 <strong>event 对象</strong></p><h3 id="this-指向问题？"><a href="#this-指向问题？" class="headerlink" title="this 指向问题？"></a>this 指向问题？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果输出this， 指向window</span></span><br><span class="line">inp.oninput = debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>),<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="event-对象问题？"><a href="#event-对象问题？" class="headerlink" title="event 对象问题？"></a>event 对象问题？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer; <span class="comment">//计时器id</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timer); <span class="comment">//清除计时器</span></span><br><span class="line">        timer = setTimeout(func, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bing</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">inp.oninput = debounce(bing, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">//输出 undefined</span></span><br></pre></td></tr></table></figure><h3 id="完善后的代码"><a href="#完善后的代码" class="headerlink" title="完善后的代码"></a>完善后的代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer; <span class="comment">//计时器id</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> _this = <span class="keyword">this</span>; <span class="comment">//保留this</span></span><br><span class="line">        <span class="keyword">let</span> _arg = <span class="built_in">arguments</span>; <span class="comment">//保留event</span></span><br><span class="line"></span><br><span class="line">        clearTimeout(timer); <span class="comment">//清除计时器</span></span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            func.apply(_this, _arg); <span class="comment">//改变指向</span></span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bing</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e, <span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">inp.oninput = debounce(bing, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="实现效果如下图"><a href="#实现效果如下图" class="headerlink" title="实现效果如下图:"></a>实现效果如下图:</h3><p><img alt="防抖" data-src="https://s2.ax1x.com/2019/09/04/nZsxC8.gif" class="lozad"></p><h2 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流 throttle"></a>节流 throttle</h2><h3 id="节流原理"><a href="#节流原理" class="headerlink" title="节流原理"></a>节流原理</h3><blockquote><p>特定的时间内周期，事件只会执行一次，不管被触发了多少次。如一些抽奖系统等。</p></blockquote><p><img alt="节流" data-src="https://s2.ax1x.com/2019/09/04/nZDyPU.png" class="lozad"></p><p>节流的实现目前有两种主流方式：<strong>时间戳</strong> 和 <strong>定时器</strong></p><h3 id="节流实现"><a href="#节流实现" class="headerlink" title="节流实现"></a>节流实现</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"show"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"ibox"</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//节流</span></span><br><span class="line"><span class="keyword">let</span> show = <span class="built_in">document</span>.querySelector(<span class="string">"#show"</span>),</span><br><span class="line">    ibox = <span class="built_in">document</span>.querySelector(<span class="string">"#ibox"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//shell函数</span></span><br><span class="line">    <span class="keyword">let</span> lastTime = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="keyword">if</span> (nowTime - lastTime &gt; wait) &#123;</span><br><span class="line">            fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">            lastTime = nowTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buy</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    show.innerText = <span class="built_in">parseInt</span>(show.innerText) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ibox.onclick = throttle(buy, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><img alt="节流" data-src="https://s2.ax1x.com/2019/09/04/nZyPDs.gif" class="lozad"></p><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ol><li><a href="https://juejin.im/post/5b8de829f265da43623c4261" target="_blank" rel="noopener">7 分钟理解 JS 的节流、防抖及使用场景</a></li><li><a href="https://juejin.im/post/5931561fa22b9d0058c5b87d" target="_blank" rel="noopener">JavaScript 专题之跟着 underscore 学防抖</a></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt) what &amp; why ?</title>
      <link href="/2019/07/13/02-%E7%90%86%E8%A7%A3parseInt/"/>
      <url>/2019/07/13/02-%E7%90%86%E8%A7%A3parseInt/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转自 <a href="https://github.com/sisterAn/blog/issues/19" target="_blank" rel="noopener">https://github.com/sisterAn/blog/issues/19</a> 侵删</p></blockquote><h3 id="一道题目引发的问题"><a href="#一道题目引发的问题" class="headerlink" title="一道题目引发的问题"></a>一道题目引发的问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>].map(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="comment">// [10, NaN, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt"></a>parseInt</h3><p><code>parseInt()</code>  函数解析一个字符串参数，并返回一个指定基数的整数 (数学系统的基础)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> intValue = <span class="built_in">parseInt</span>(string[, radix]);</span><br></pre></td></tr></table></figure><p><code>string</code>  要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用 ToString 抽象操作)。字符串开头的空白符将会被忽略。</p><p><code>radix</code>  一个介于 2 和 36 之间的整数(数学系统的基础)，表示上述字符串的基数。默认为 10。<br><code>返回值</code>  返回一个整数或 NaN</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="number">100</span>); <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">100</span>, <span class="number">10</span>); <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">100</span>, <span class="number">2</span>); <span class="comment">// 4 -&gt; converts 100 in base 2 to base 10</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>在<code>radix</code>为 undefined，或者<code>radix</code>为 0 或者没有指定的情况下，JavaScript 作如下处理：</p><ul><li>如果字符串 string 以”0x”或者”0X”开头, 则基数是 16 (16 进制).</li><li>如果字符串 string 以”0”开头, 基数是 8（八进制）或者 10（十进制），那么具体是哪个基数由实现环境决定。ECMAScript 5 规定使用 10，但是并不是所有的浏览器都遵循这个规定。因此，永远都要明确给出 radix 参数的值。</li><li>如果字符串 string 以其它任何值开头，则基数是 10 (十进制)。</li></ul><p>更多详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank" rel="noopener">parseInt | MDN</a></p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p><code>map()</code>  方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = arr.map(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">currentValue[,index[, array]]</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// Return element for new_array</span></span><br><span class="line"> &#125;[, thisArg])</span><br></pre></td></tr></table></figure><p>可以看到<code>callback</code>回调函数需要三个参数, 我们通常只使用第一个参数 (其他两个参数是可选的)。<br><code>currentValue</code>  是 callback 数组中正在处理的当前元素。<br><code>index</code>可选, 是 callback 数组中正在处理的当前元素的索引。<br><code>array</code>可选, 是 callback map 方法被调用的数组。<br>另外还有<code>thisArg</code>可选, 执行 callback 函数时使用的 this 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.map(<span class="function"><span class="params">num</span> =&gt;</span> num + <span class="number">1</span>); <span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>更多详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">Array.prototype.map() | MDN</a></p><h3 id="回到真实的事例上"><a href="#回到真实的事例上" class="headerlink" title="回到真实的事例上"></a>回到真实的事例上</h3><p>回到我们真实的事例上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(<span class="built_in">parseInt</span>);</span><br></pre></td></tr></table></figure><p>对于每个迭代<code>map</code>, <code>parseInt()</code>传递两个参数: <strong>字符串和基数</strong>。<br>所以实际执行的的代码是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(item, index);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>即返回的值分别为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"1"</span>, <span class="number">0</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"2"</span>, <span class="number">1</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"3"</span>, <span class="number">2</span>); <span class="comment">// NaN, 3 不是二进制</span></span><br></pre></td></tr></table></figure><p>所以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="comment">// 1, NaN, NaN</span></span><br></pre></td></tr></table></figure><p>由此，加里·伯恩哈德例子也就很好解释了，这里不再赘述</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>].map(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="comment">// [10, NaN, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="如何在现实世界中做到这一点"><a href="#如何在现实世界中做到这一点" class="headerlink" title="如何在现实世界中做到这一点"></a>如何在现实世界中做到这一点</h3><p>如果您实际上想要循环访问字符串数组, 该怎么办？ <code>map()</code>然后把它换成数字？使用编号!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>, <span class="string">"10"</span>].map(<span class="built_in">Number</span>);</span><br><span class="line"><span class="comment">// [10, 10, 10, 10, 10]</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记</title>
      <link href="/2019/06/30/01-webpack%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/06/30/01-webpack%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="webpack-介绍"><a href="#webpack-介绍" class="headerlink" title="webpack 介绍"></a>webpack 介绍</h2><p>Webpack 是前端 <strong>模块化管理</strong> 和 <strong>打包工具</strong>。它可以将许多松散的模块按照依赖和规则打包成前端资源。还可以将模块<strong>按需加载</strong>。<br>通过 <code>loader</code> 的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。</p><blockquote><p>本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</p></blockquote><p><img alt="webpack原理" data-src="https://s2.ax1x.com/2019/09/02/nPRU2j.png" class="lozad"></p><h3 id="webpack-四个核心概念"><a href="#webpack-四个核心概念" class="headerlink" title="webpack 四个核心概念"></a>webpack 四个核心概念</h3><ul><li>入口(entry)</li><li>输出(output)</li><li>loader</li><li>插件(plugins)</li></ul><h3 id="关于模块化"><a href="#关于模块化" class="headerlink" title="关于模块化"></a>关于模块化</h3><ol><li>模块：拥有独立功能的部分</li><li>模块化：一种将系统分离成独立功能部分的方法</li><li>模块化解决的问题： <strong>避免变量污染</strong></li></ol><h3 id="CommonJS-规范"><a href="#CommonJS-规范" class="headerlink" title="CommonJS 规范"></a>CommonJS 规范</h3><p><strong>nodejs 采用了 CommonJS 模块化规范</strong></p><ol><li>每个文件就是一个独立的模块，其内部所有变量私有，对外不可见</li><li>每个模块内部使用 module.exports 进行私有暴露</li><li>加载模块使用 require</li></ol><h3 id="ES5-模块"><a href="#ES5-模块" class="headerlink" title="ES5 模块"></a>ES5 模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">"./a.js"</span>);</span><br><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">"jquery"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露</span></span><br><span class="line"><span class="keyword">var</span> fuc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports.fuc = fuc;</span><br></pre></td></tr></table></figure><h3 id="ES6-模块（2015）"><a href="#ES6-模块（2015）" class="headerlink" title="ES6 模块（2015）"></a>ES6 模块（2015）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">'./a.js</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//暴露</span></span><br><span class="line"><span class="string">export var fuc=( )=&gt;&#123; &#125;</span></span><br></pre></td></tr></table></figure><h2 id="webpack-安装"><a href="#webpack-安装" class="headerlink" title="webpack 安装"></a>webpack 安装</h2><h3 id="全局安装-安装命令行工具"><a href="#全局安装-安装命令行工具" class="headerlink" title="全局安装,安装命令行工具"></a>全局安装,安装命令行工具</h3><p><code>yarn global add webpack</code> 或 <code>npm install --global webpack</code></p><h3 id="项目安装"><a href="#项目安装" class="headerlink" title="项目安装"></a>项目安装</h3><p>初始化<br><code>yarn init -y</code> 或 <code>npm init -y</code></p><p>项目安装依赖<br><code>yarn add webpack@3.8.1 --save-dev</code></p><h2 id="配置文件-webpack-config-js"><a href="#配置文件-webpack-config-js" class="headerlink" title="配置文件 webpack.config.js"></a>配置文件 webpack.config.js</h2><blockquote><p>以 3.8.1 版本为例</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack配置对象</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//入口</span></span><br><span class="line">    entry: <span class="string">"./src/a.js"</span>, <span class="comment">// 单入单出</span></span><br><span class="line">    <span class="comment">// entry:['./src/a.js','./src/c.js'],   //多入口 单出口</span></span><br><span class="line">    <span class="comment">// entry: &#123;                  //多入口，多出口</span></span><br><span class="line">    <span class="comment">//     // key(打包以后的文件名): value(入口路径)</span></span><br><span class="line">    <span class="comment">//     amodule: './src/a.js',</span></span><br><span class="line">    <span class="comment">//     cmodule: './src/c.js'</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// 配置输出</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">//输出的路径(硬盘输出)</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">"dist/"</span>),</span><br><span class="line">        <span class="comment">//输出的文件名</span></span><br><span class="line">        filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">        <span class="comment">// filename: "[name].js",  /*多出口需设置filename*/</span></span><br><span class="line">        <span class="comment">// webpack-dev-server 服务器输出路径</span></span><br><span class="line">        publicPath: <span class="string">"/dist/"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//loader加载器配置</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            <span class="comment">// css-loader</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//less-loader</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"style-loader"</span> <span class="comment">// creates style nodes from JS strings</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"css-loader"</span> <span class="comment">// translates CSS into CommonJS</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"less-loader"</span> <span class="comment">// compiles Less to CSS</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//file-loader</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"file-loader"</span>,</span><br><span class="line">                        options: &#123;&#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//所有插件都写在此处！！！！</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">"作者: naoki"</span>),</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">"common"</span>) <span class="comment">//提取公共模块</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//自动打包</span></span><br><span class="line">    watch: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
